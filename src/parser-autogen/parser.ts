/* AutoGenerated Code, changes may be overwritten
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    stmt_list = "stmt_list",
    stmt_list_$0 = "stmt_list_$0",
    stmt = "stmt",
    stmt_select = "stmt_select",
    select_core = "select_core",
    select_qualifier_1 = "select_qualifier_1",
    select_qualifier_2 = "select_qualifier_2",
    select_result_column_list = "select_result_column_list",
    select_result_column_list_$0 = "select_result_column_list_$0",
    select_result_column_1 = "select_result_column_1",
    select_result_column_2 = "select_result_column_2",
    select_result_column_3 = "select_result_column_3",
    select_result_column_expression = "select_result_column_expression",
    select_result_column_whole_table = "select_result_column_whole_table",
    select_from_1 = "select_from_1",
    select_from_2 = "select_from_2",
    select_from_table_or_subquery_list = "select_from_table_or_subquery_list",
    select_from_table_or_subquery_list_$0 = "select_from_table_or_subquery_list_$0",
    select_from_table_or_subquery_1 = "select_from_table_or_subquery_1",
    select_from_table_or_subquery_2 = "select_from_table_or_subquery_2",
    select_from_table_or_subquery_3 = "select_from_table_or_subquery_3",
    select_from_table_or_subquery_$0 = "select_from_table_or_subquery_$0",
    select_from_join = "select_from_join",
    select_from_join_$0 = "select_from_join_$0",
    column_name_list = "column_name_list",
    column_name_list_$0 = "column_name_list_$0",
    select_from_join_constraint_1 = "select_from_join_constraint_1",
    select_from_join_constraint_2 = "select_from_join_constraint_2",
    select_from_join_operator_1 = "select_from_join_operator_1",
    select_from_join_operator_2 = "select_from_join_operator_2",
    select_from_join_operator_3 = "select_from_join_operator_3",
    select_from_join_operator_4 = "select_from_join_operator_4",
    select_from_join_operator_5 = "select_from_join_operator_5",
    select_from_join_operator_6 = "select_from_join_operator_6",
    select_where = "select_where",
    expression = "expression",
    select_with = "select_with",
    identifier = "identifier",
    literal_comma = "literal_comma",
    literal_period = "literal_period",
    literal_asterisk = "literal_asterisk",
    literal_semi_colon = "literal_semi_colon",
    literal_open_paren = "literal_open_paren",
    literal_close_paren = "literal_close_paren",
    literal_on = "literal_on",
    literal_using = "literal_using",
    literal_natural = "literal_natural",
    literal_outer = "literal_outer",
    literal_left = "literal_left",
    literal_right = "literal_right",
    literal_inner = "literal_inner",
    literal_full = "literal_full",
    literal_cross = "literal_cross",
    literal_join = "literal_join",
    literal_from = "literal_from",
    literal_with = "literal_with",
    literal_select = "literal_select",
    literal_all = "literal_all",
    literal_distinct = "literal_distinct",
    literal_as = "literal_as",
    whitespace = "whitespace",
}
export type start = stmt_list;
export interface stmt_list {
    kind: ASTKinds.stmt_list;
    stmt: stmt;
    other_stmts: stmt_list_$0[];
}
export interface stmt_list_$0 {
    kind: ASTKinds.stmt_list_$0;
    stmt: stmt;
}
export type stmt = stmt_select;
export interface stmt_select {
    kind: ASTKinds.stmt_select;
    select_with: Nullable<select_with>;
    select_core: select_core;
}
export interface select_core {
    kind: ASTKinds.select_core;
    qualifier: Nullable<select_qualifier>;
    columns: select_result_column_list;
    from: Nullable<select_from>;
}
export type select_qualifier = select_qualifier_1 | select_qualifier_2;
export type select_qualifier_1 = literal_all;
export type select_qualifier_2 = literal_distinct;
export interface select_result_column_list {
    kind: ASTKinds.select_result_column_list;
    select_result_column: select_result_column;
    other_result_columns: select_result_column_list_$0[];
}
export interface select_result_column_list_$0 {
    kind: ASTKinds.select_result_column_list_$0;
    select_result_column: select_result_column;
}
export type select_result_column = select_result_column_1 | select_result_column_2 | select_result_column_3;
export type select_result_column_1 = select_result_column_whole_table;
export type select_result_column_2 = literal_asterisk;
export type select_result_column_3 = select_result_column_expression;
export interface select_result_column_expression {
    kind: ASTKinds.select_result_column_expression;
    expression: expression;
    column_alias: Nullable<identifier>;
}
export interface select_result_column_whole_table {
    kind: ASTKinds.select_result_column_whole_table;
    table_name: identifier;
}
export type select_from = select_from_1 | select_from_2;
export interface select_from_1 {
    kind: ASTKinds.select_from_1;
    table_or_subquery: select_from_table_or_subquery_list;
}
export interface select_from_2 {
    kind: ASTKinds.select_from_2;
    join: select_from_join;
}
export interface select_from_table_or_subquery_list {
    kind: ASTKinds.select_from_table_or_subquery_list;
    table_or_subquery: select_from_table_or_subquery;
    other_table_or_subqueries: select_from_table_or_subquery_list_$0[];
}
export interface select_from_table_or_subquery_list_$0 {
    kind: ASTKinds.select_from_table_or_subquery_list_$0;
    table_or_subquery: select_from_table_or_subquery;
}
export type select_from_table_or_subquery = select_from_table_or_subquery_1 | select_from_table_or_subquery_2 | select_from_table_or_subquery_3;
export interface select_from_table_or_subquery_1 {
    kind: ASTKinds.select_from_table_or_subquery_1;
    table_or_subquery: select_from;
}
export interface select_from_table_or_subquery_2 {
    kind: ASTKinds.select_from_table_or_subquery_2;
    select_stmt: stmt_select;
    alias: Nullable<identifier>;
}
export interface select_from_table_or_subquery_3 {
    kind: ASTKinds.select_from_table_or_subquery_3;
    schema_name: Nullable<select_from_table_or_subquery_$0>;
    table_name: identifier;
    alias: Nullable<identifier>;
}
export interface select_from_table_or_subquery_$0 {
    kind: ASTKinds.select_from_table_or_subquery_$0;
    schema_name: identifier;
}
export interface select_from_join {
    kind: ASTKinds.select_from_join;
    table_a: select_from_table_or_subquery;
    joins: Nullable<select_from_join_$0>;
}
export interface select_from_join_$0 {
    kind: ASTKinds.select_from_join_$0;
}
export interface column_name_list {
    kind: ASTKinds.column_name_list;
    column: identifier;
    other_columns: Nullable<column_name_list_$0>;
}
export interface column_name_list_$0 {
    kind: ASTKinds.column_name_list_$0;
    column: identifier;
}
export type select_from_join_constraint = select_from_join_constraint_1 | select_from_join_constraint_2;
export interface select_from_join_constraint_1 {
    kind: ASTKinds.select_from_join_constraint_1;
    on: literal_on;
    expression: expression;
}
export interface select_from_join_constraint_2 {
    kind: ASTKinds.select_from_join_constraint_2;
    columns: column_name_list;
}
export type select_from_join_operator = select_from_join_operator_1 | select_from_join_operator_2 | select_from_join_operator_3 | select_from_join_operator_4 | select_from_join_operator_5 | select_from_join_operator_6;
export interface select_from_join_operator_1 {
    kind: ASTKinds.select_from_join_operator_1;
    type: Nullable<literal_natural>;
}
export interface select_from_join_operator_2 {
    kind: ASTKinds.select_from_join_operator_2;
    natural: Nullable<literal_natural>;
    type: literal_left;
    outer: Nullable<literal_outer>;
}
export interface select_from_join_operator_3 {
    kind: ASTKinds.select_from_join_operator_3;
    natural: Nullable<literal_natural>;
    type: literal_right;
    outer: Nullable<literal_outer>;
}
export interface select_from_join_operator_4 {
    kind: ASTKinds.select_from_join_operator_4;
    natural: Nullable<literal_natural>;
    type: literal_full;
    outer: Nullable<literal_outer>;
}
export interface select_from_join_operator_5 {
    kind: ASTKinds.select_from_join_operator_5;
    natural: Nullable<literal_natural>;
    type: literal_inner;
}
export interface select_from_join_operator_6 {
    kind: ASTKinds.select_from_join_operator_6;
    type: literal_cross;
}
export type select_where = expression;
export type expression = string;
export type select_with = literal_with;
export interface identifier {
    kind: ASTKinds.identifier;
    value: string;
}
export interface literal_comma {
    kind: ASTKinds.literal_comma;
}
export interface literal_period {
    kind: ASTKinds.literal_period;
}
export interface literal_asterisk {
    kind: ASTKinds.literal_asterisk;
}
export interface literal_semi_colon {
    kind: ASTKinds.literal_semi_colon;
    literal: string;
}
export interface literal_open_paren {
    kind: ASTKinds.literal_open_paren;
    literal: string;
}
export interface literal_close_paren {
    kind: ASTKinds.literal_close_paren;
    literal: string;
}
export interface literal_on {
    kind: ASTKinds.literal_on;
    literal: string;
}
export interface literal_using {
    kind: ASTKinds.literal_using;
    literal: string;
}
export interface literal_natural {
    kind: ASTKinds.literal_natural;
    literal: string;
}
export interface literal_outer {
    kind: ASTKinds.literal_outer;
    literal: string;
}
export interface literal_left {
    kind: ASTKinds.literal_left;
    literal: string;
}
export interface literal_right {
    kind: ASTKinds.literal_right;
    literal: string;
}
export interface literal_inner {
    kind: ASTKinds.literal_inner;
    literal: string;
}
export interface literal_full {
    kind: ASTKinds.literal_full;
    literal: string;
}
export interface literal_cross {
    kind: ASTKinds.literal_cross;
    literal: string;
}
export interface literal_join {
    kind: ASTKinds.literal_join;
    literal: string;
}
export interface literal_from {
    kind: ASTKinds.literal_from;
    literal: string;
}
export interface literal_with {
    kind: ASTKinds.literal_with;
    literal: string;
}
export interface literal_select {
    kind: ASTKinds.literal_select;
    literal: string;
}
export interface literal_all {
    kind: ASTKinds.literal_all;
    literal: string;
}
export interface literal_distinct {
    kind: ASTKinds.literal_distinct;
    literal: string;
}
export interface literal_as {
    kind: ASTKinds.literal_as;
    literal: string;
}
export type whitespace = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.matchstmt_list($$dpth + 1, $$cr);
    }
    public matchstmt_list($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt_list> {
        return this.run<stmt_list>($$dpth,
            () => {
                let $scope$stmt: Nullable<stmt>;
                let $scope$other_stmts: Nullable<stmt_list_$0[]>;
                let $$res: Nullable<stmt_list> = null;
                if (true
                    && ($scope$stmt = this.matchstmt($$dpth + 1, $$cr)) !== null
                    && ($scope$other_stmts = this.loop<stmt_list_$0>(() => this.matchstmt_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.stmt_list, stmt: $scope$stmt, other_stmts: $scope$other_stmts};
                }
                return $$res;
            });
    }
    public matchstmt_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt_list_$0> {
        return this.run<stmt_list_$0>($$dpth,
            () => {
                let $scope$stmt: Nullable<stmt>;
                let $$res: Nullable<stmt_list_$0> = null;
                if (true
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_semi_colon($$dpth + 1, $$cr) !== null
                    && ($scope$stmt = this.matchstmt($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.stmt_list_$0, stmt: $scope$stmt};
                }
                return $$res;
            });
    }
    public matchstmt($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt> {
        return this.matchstmt_select($$dpth + 1, $$cr);
    }
    public matchstmt_select($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt_select> {
        return this.run<stmt_select>($$dpth,
            () => {
                let $scope$select_with: Nullable<Nullable<select_with>>;
                let $scope$select_core: Nullable<select_core>;
                let $$res: Nullable<stmt_select> = null;
                if (true
                    && (($scope$select_with = this.matchselect_with($$dpth + 1, $$cr)) || true)
                    && ($scope$select_core = this.matchselect_core($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.stmt_select, select_with: $scope$select_with, select_core: $scope$select_core};
                }
                return $$res;
            });
    }
    public matchselect_core($$dpth: number, $$cr?: ErrorTracker): Nullable<select_core> {
        return this.run<select_core>($$dpth,
            () => {
                let $scope$qualifier: Nullable<Nullable<select_qualifier>>;
                let $scope$columns: Nullable<select_result_column_list>;
                let $scope$from: Nullable<Nullable<select_from>>;
                let $$res: Nullable<select_core> = null;
                if (true
                    && this.matchliteral_select($$dpth + 1, $$cr) !== null
                    && (($scope$qualifier = this.matchselect_qualifier($$dpth + 1, $$cr)) || true)
                    && ($scope$columns = this.matchselect_result_column_list($$dpth + 1, $$cr)) !== null
                    && (($scope$from = this.matchselect_from($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_core, qualifier: $scope$qualifier, columns: $scope$columns, from: $scope$from};
                }
                return $$res;
            });
    }
    public matchselect_qualifier($$dpth: number, $$cr?: ErrorTracker): Nullable<select_qualifier> {
        return this.choice<select_qualifier>([
            () => this.matchselect_qualifier_1($$dpth + 1, $$cr),
            () => this.matchselect_qualifier_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_qualifier_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_qualifier_1> {
        return this.matchliteral_all($$dpth + 1, $$cr);
    }
    public matchselect_qualifier_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_qualifier_2> {
        return this.matchliteral_distinct($$dpth + 1, $$cr);
    }
    public matchselect_result_column_list($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_list> {
        return this.run<select_result_column_list>($$dpth,
            () => {
                let $scope$select_result_column: Nullable<select_result_column>;
                let $scope$other_result_columns: Nullable<select_result_column_list_$0[]>;
                let $$res: Nullable<select_result_column_list> = null;
                if (true
                    && ($scope$select_result_column = this.matchselect_result_column($$dpth + 1, $$cr)) !== null
                    && ($scope$other_result_columns = this.loop<select_result_column_list_$0>(() => this.matchselect_result_column_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_result_column_list, select_result_column: $scope$select_result_column, other_result_columns: $scope$other_result_columns};
                }
                return $$res;
            });
    }
    public matchselect_result_column_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_list_$0> {
        return this.run<select_result_column_list_$0>($$dpth,
            () => {
                let $scope$select_result_column: Nullable<select_result_column>;
                let $$res: Nullable<select_result_column_list_$0> = null;
                if (true
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$select_result_column = this.matchselect_result_column($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_result_column_list_$0, select_result_column: $scope$select_result_column};
                }
                return $$res;
            });
    }
    public matchselect_result_column($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column> {
        return this.choice<select_result_column>([
            () => this.matchselect_result_column_1($$dpth + 1, $$cr),
            () => this.matchselect_result_column_2($$dpth + 1, $$cr),
            () => this.matchselect_result_column_3($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_result_column_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_1> {
        return this.matchselect_result_column_whole_table($$dpth + 1, $$cr);
    }
    public matchselect_result_column_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_2> {
        return this.matchliteral_asterisk($$dpth + 1, $$cr);
    }
    public matchselect_result_column_3($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_3> {
        return this.matchselect_result_column_expression($$dpth + 1, $$cr);
    }
    public matchselect_result_column_expression($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_expression> {
        return this.run<select_result_column_expression>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $scope$column_alias: Nullable<Nullable<identifier>>;
                let $$res: Nullable<select_result_column_expression> = null;
                if (true
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && ((this.matchliteral_as($$dpth + 1, $$cr)) || true)
                    && (($scope$column_alias = this.matchidentifier($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_result_column_expression, expression: $scope$expression, column_alias: $scope$column_alias};
                }
                return $$res;
            });
    }
    public matchselect_result_column_whole_table($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_whole_table> {
        return this.run<select_result_column_whole_table>($$dpth,
            () => {
                let $scope$table_name: Nullable<identifier>;
                let $$res: Nullable<select_result_column_whole_table> = null;
                if (true
                    && ($scope$table_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_period($$dpth + 1, $$cr) !== null
                    && this.matchliteral_asterisk($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_result_column_whole_table, table_name: $scope$table_name};
                }
                return $$res;
            });
    }
    public matchselect_from($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from> {
        return this.choice<select_from>([
            () => this.matchselect_from_1($$dpth + 1, $$cr),
            () => this.matchselect_from_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_1> {
        return this.run<select_from_1>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from_table_or_subquery_list>;
                let $$res: Nullable<select_from_1> = null;
                if (true
                    && this.matchliteral_from($$dpth + 1, $$cr) !== null
                    && ($scope$table_or_subquery = this.matchselect_from_table_or_subquery_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_1, table_or_subquery: $scope$table_or_subquery};
                }
                return $$res;
            });
    }
    public matchselect_from_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_2> {
        return this.run<select_from_2>($$dpth,
            () => {
                let $scope$join: Nullable<select_from_join>;
                let $$res: Nullable<select_from_2> = null;
                if (true
                    && this.matchliteral_from($$dpth + 1, $$cr) !== null
                    && ($scope$join = this.matchselect_from_join($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_2, join: $scope$join};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_list($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_list> {
        return this.run<select_from_table_or_subquery_list>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from_table_or_subquery>;
                let $scope$other_table_or_subqueries: Nullable<select_from_table_or_subquery_list_$0[]>;
                let $$res: Nullable<select_from_table_or_subquery_list> = null;
                if (true
                    && ($scope$table_or_subquery = this.matchselect_from_table_or_subquery($$dpth + 1, $$cr)) !== null
                    && ($scope$other_table_or_subqueries = this.loop<select_from_table_or_subquery_list_$0>(() => this.matchselect_from_table_or_subquery_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_list, table_or_subquery: $scope$table_or_subquery, other_table_or_subqueries: $scope$other_table_or_subqueries};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_list_$0> {
        return this.run<select_from_table_or_subquery_list_$0>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from_table_or_subquery>;
                let $$res: Nullable<select_from_table_or_subquery_list_$0> = null;
                if (true
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$table_or_subquery = this.matchselect_from_table_or_subquery($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_list_$0, table_or_subquery: $scope$table_or_subquery};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery> {
        return this.choice<select_from_table_or_subquery>([
            () => this.matchselect_from_table_or_subquery_1($$dpth + 1, $$cr),
            () => this.matchselect_from_table_or_subquery_2($$dpth + 1, $$cr),
            () => this.matchselect_from_table_or_subquery_3($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_table_or_subquery_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_1> {
        return this.run<select_from_table_or_subquery_1>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from>;
                let $$res: Nullable<select_from_table_or_subquery_1> = null;
                if (true
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$table_or_subquery = this.matchselect_from($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_1, table_or_subquery: $scope$table_or_subquery};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_2> {
        return this.run<select_from_table_or_subquery_2>($$dpth,
            () => {
                let $scope$select_stmt: Nullable<stmt_select>;
                let $scope$alias: Nullable<Nullable<identifier>>;
                let $$res: Nullable<select_from_table_or_subquery_2> = null;
                if (true
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$select_stmt = this.matchstmt_select($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                    && ((this.matchliteral_as($$dpth + 1, $$cr)) || true)
                    && (($scope$alias = this.matchidentifier($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_2, select_stmt: $scope$select_stmt, alias: $scope$alias};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_3($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_3> {
        return this.run<select_from_table_or_subquery_3>($$dpth,
            () => {
                let $scope$schema_name: Nullable<Nullable<select_from_table_or_subquery_$0>>;
                let $scope$table_name: Nullable<identifier>;
                let $scope$alias: Nullable<Nullable<identifier>>;
                let $$res: Nullable<select_from_table_or_subquery_3> = null;
                if (true
                    && (($scope$schema_name = this.matchselect_from_table_or_subquery_$0($$dpth + 1, $$cr)) || true)
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$table_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && (($scope$alias = this.matchidentifier($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_3, schema_name: $scope$schema_name, table_name: $scope$table_name, alias: $scope$alias};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_$0> {
        return this.run<select_from_table_or_subquery_$0>($$dpth,
            () => {
                let $scope$schema_name: Nullable<identifier>;
                let $$res: Nullable<select_from_table_or_subquery_$0> = null;
                if (true
                    && ($scope$schema_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_period($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_$0, schema_name: $scope$schema_name};
                }
                return $$res;
            });
    }
    public matchselect_from_join($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join> {
        return this.run<select_from_join>($$dpth,
            () => {
                let $scope$table_a: Nullable<select_from_table_or_subquery>;
                let $scope$joins: Nullable<Nullable<select_from_join_$0>>;
                let $$res: Nullable<select_from_join> = null;
                if (true
                    && ($scope$table_a = this.matchselect_from_table_or_subquery($$dpth + 1, $$cr)) !== null
                    && (($scope$joins = this.matchselect_from_join_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_from_join, table_a: $scope$table_a, joins: $scope$joins};
                }
                return $$res;
            });
    }
    public matchselect_from_join_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_$0> {
        return this.run<select_from_join_$0>($$dpth,
            () => {
                let $$res: Nullable<select_from_join_$0> = null;
                if (true
                    && this.matchselect_from_join_operator($$dpth + 1, $$cr) !== null
                    && this.matchselect_from_table_or_subquery($$dpth + 1, $$cr) !== null
                    && ((this.matchselect_from_join_constraint($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_from_join_$0, };
                }
                return $$res;
            });
    }
    public matchcolumn_name_list($$dpth: number, $$cr?: ErrorTracker): Nullable<column_name_list> {
        return this.run<column_name_list>($$dpth,
            () => {
                let $scope$column: Nullable<identifier>;
                let $scope$other_columns: Nullable<Nullable<column_name_list_$0>>;
                let $$res: Nullable<column_name_list> = null;
                if (true
                    && ($scope$column = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && (($scope$other_columns = this.matchcolumn_name_list_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.column_name_list, column: $scope$column, other_columns: $scope$other_columns};
                }
                return $$res;
            });
    }
    public matchcolumn_name_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<column_name_list_$0> {
        return this.run<column_name_list_$0>($$dpth,
            () => {
                let $scope$column: Nullable<identifier>;
                let $$res: Nullable<column_name_list_$0> = null;
                if (true
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$column = this.matchidentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.column_name_list_$0, column: $scope$column};
                }
                return $$res;
            });
    }
    public matchselect_from_join_constraint($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_constraint> {
        return this.choice<select_from_join_constraint>([
            () => this.matchselect_from_join_constraint_1($$dpth + 1, $$cr),
            () => this.matchselect_from_join_constraint_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_join_constraint_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_constraint_1> {
        return this.run<select_from_join_constraint_1>($$dpth,
            () => {
                let $scope$on: Nullable<literal_on>;
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<select_from_join_constraint_1> = null;
                if (true
                    && ($scope$on = this.matchliteral_on($$dpth + 1, $$cr)) !== null
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_constraint_1, on: $scope$on, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchselect_from_join_constraint_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_constraint_2> {
        return this.run<select_from_join_constraint_2>($$dpth,
            () => {
                let $scope$columns: Nullable<column_name_list>;
                let $$res: Nullable<select_from_join_constraint_2> = null;
                if (true
                    && this.matchliteral_using($$dpth + 1, $$cr) !== null
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$columns = this.matchcolumn_name_list($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_constraint_2, columns: $scope$columns};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator> {
        return this.choice<select_from_join_operator>([
            () => this.matchselect_from_join_operator_1($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_2($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_3($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_4($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_5($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_6($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_join_operator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_1> {
        return this.run<select_from_join_operator_1>($$dpth,
            () => {
                let $scope$type: Nullable<Nullable<literal_natural>>;
                let $$res: Nullable<select_from_join_operator_1> = null;
                if (true
                    && (($scope$type = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_1, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_2> {
        return this.run<select_from_join_operator_2>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_left>;
                let $scope$outer: Nullable<Nullable<literal_outer>>;
                let $$res: Nullable<select_from_join_operator_2> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_left($$dpth + 1, $$cr)) !== null
                    && (($scope$outer = this.matchliteral_outer($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_2, natural: $scope$natural, type: $scope$type, outer: $scope$outer};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_3> {
        return this.run<select_from_join_operator_3>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_right>;
                let $scope$outer: Nullable<Nullable<literal_outer>>;
                let $$res: Nullable<select_from_join_operator_3> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_right($$dpth + 1, $$cr)) !== null
                    && (($scope$outer = this.matchliteral_outer($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_3, natural: $scope$natural, type: $scope$type, outer: $scope$outer};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_4($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_4> {
        return this.run<select_from_join_operator_4>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_full>;
                let $scope$outer: Nullable<Nullable<literal_outer>>;
                let $$res: Nullable<select_from_join_operator_4> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_full($$dpth + 1, $$cr)) !== null
                    && (($scope$outer = this.matchliteral_outer($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_4, natural: $scope$natural, type: $scope$type, outer: $scope$outer};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_5($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_5> {
        return this.run<select_from_join_operator_5>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_inner>;
                let $$res: Nullable<select_from_join_operator_5> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_inner($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_5, natural: $scope$natural, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_6($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_6> {
        return this.run<select_from_join_operator_6>($$dpth,
            () => {
                let $scope$type: Nullable<literal_cross>;
                let $$res: Nullable<select_from_join_operator_6> = null;
                if (true
                    && ($scope$type = this.matchliteral_cross($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_6, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchselect_where($$dpth: number, $$cr?: ErrorTracker): Nullable<select_where> {
        return this.matchexpression($$dpth + 1, $$cr);
    }
    public matchexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<expression> {
        return this.regexAccept(String.raw`(?:foobar)`, $$dpth + 1, $$cr);
    }
    public matchselect_with($$dpth: number, $$cr?: ErrorTracker): Nullable<select_with> {
        return this.matchliteral_with($$dpth + 1, $$cr);
    }
    public matchidentifier($$dpth: number, $$cr?: ErrorTracker): Nullable<identifier> {
        return this.run<identifier>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<identifier> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z0-9]*)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.identifier, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchliteral_comma($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_comma> {
        return this.run<literal_comma>($$dpth,
            () => {
                let $$res: Nullable<literal_comma> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_comma, };
                }
                return $$res;
            });
    }
    public matchliteral_period($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_period> {
        return this.run<literal_period>($$dpth,
            () => {
                let $$res: Nullable<literal_period> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_period, };
                }
                return $$res;
            });
    }
    public matchliteral_asterisk($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_asterisk> {
        return this.run<literal_asterisk>($$dpth,
            () => {
                let $$res: Nullable<literal_asterisk> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_asterisk, };
                }
                return $$res;
            });
    }
    public matchliteral_semi_colon($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_semi_colon> {
        return this.run<literal_semi_colon>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_semi_colon> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_semi_colon, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_open_paren($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_open_paren> {
        return this.run<literal_open_paren>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_open_paren> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_open_paren, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_close_paren($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_close_paren> {
        return this.run<literal_close_paren>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_close_paren> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_close_paren, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_on($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_on> {
        return this.run<literal_on>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_on> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:on)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_on, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_using($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_using> {
        return this.run<literal_using>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_using> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:using)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_using, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_natural($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_natural> {
        return this.run<literal_natural>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_natural> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:natural)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_natural, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_outer($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_outer> {
        return this.run<literal_outer>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_outer> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:outer)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_outer, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_left($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_left> {
        return this.run<literal_left>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_left> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:left)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_left, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_right($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_right> {
        return this.run<literal_right>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_right> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:right)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_right, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_inner($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_inner> {
        return this.run<literal_inner>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_inner> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:inner)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_inner, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_full($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_full> {
        return this.run<literal_full>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_full> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:full)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_full, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_cross($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_cross> {
        return this.run<literal_cross>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_cross> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:cross)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_cross, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_join($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_join> {
        return this.run<literal_join>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_join> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:join)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_join, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_from($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_from> {
        return this.run<literal_from>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_from> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:from)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_from, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_with($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_with> {
        return this.run<literal_with>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_with> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:with)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_with, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_select($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_select> {
        return this.run<literal_select>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_select> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:select)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_select, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_all($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_all> {
        return this.run<literal_all>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_all> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:all)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_all, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_distinct($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_distinct> {
        return this.run<literal_distinct>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_distinct> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:distinct)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_distinct, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_as($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_as> {
        return this.run<literal_as>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_as> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:as)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_as, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchwhitespace($$dpth: number, $$cr?: ErrorTracker): Nullable<whitespace> {
        return this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "yi");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}