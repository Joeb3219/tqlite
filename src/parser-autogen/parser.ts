/* AutoGenerated Code, changes may be overwritten
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    stmt_list = "stmt_list",
    stmt_list_$0 = "stmt_list_$0",
    stmt = "stmt",
    stmt_select = "stmt_select",
    select_core = "select_core",
    select_qualifier_1 = "select_qualifier_1",
    select_qualifier_2 = "select_qualifier_2",
    select_result_column_list = "select_result_column_list",
    select_result_column_list_$0 = "select_result_column_list_$0",
    select_result_column_1 = "select_result_column_1",
    select_result_column_2 = "select_result_column_2",
    select_result_column_3 = "select_result_column_3",
    select_result_column_expression = "select_result_column_expression",
    select_result_column_whole_table = "select_result_column_whole_table",
    select_from_1 = "select_from_1",
    select_from_2 = "select_from_2",
    select_from_table_or_subquery_list = "select_from_table_or_subquery_list",
    select_from_table_or_subquery_list_$0 = "select_from_table_or_subquery_list_$0",
    select_from_table_or_subquery_1 = "select_from_table_or_subquery_1",
    select_from_table_or_subquery_2 = "select_from_table_or_subquery_2",
    select_from_table_or_subquery_3 = "select_from_table_or_subquery_3",
    select_from_table_or_subquery_$0 = "select_from_table_or_subquery_$0",
    select_from_join = "select_from_join",
    select_from_join_$0 = "select_from_join_$0",
    column_name_list = "column_name_list",
    column_name_list_$0 = "column_name_list_$0",
    select_from_join_constraint_1 = "select_from_join_constraint_1",
    select_from_join_constraint_2 = "select_from_join_constraint_2",
    select_from_join_operator_1 = "select_from_join_operator_1",
    select_from_join_operator_2 = "select_from_join_operator_2",
    select_from_join_operator_3 = "select_from_join_operator_3",
    select_from_join_operator_4 = "select_from_join_operator_4",
    select_from_join_operator_5 = "select_from_join_operator_5",
    select_from_join_operator_6 = "select_from_join_operator_6",
    select_where = "select_where",
    select_order = "select_order",
    select_ordering_term_list = "select_ordering_term_list",
    select_ordering_term_list_$0 = "select_ordering_term_list_$0",
    select_ordering_term = "select_ordering_term",
    select_ordering_term_$0 = "select_ordering_term_$0",
    select_ordering_term_$1 = "select_ordering_term_$1",
    select_ordering_term_$2 = "select_ordering_term_$2",
    select_ordering_term_sort_direction_1 = "select_ordering_term_sort_direction_1",
    select_ordering_term_sort_direction_2 = "select_ordering_term_sort_direction_2",
    select_ordering_term_collate = "select_ordering_term_collate",
    select_ordering_term_nulls_direction_1 = "select_ordering_term_nulls_direction_1",
    select_ordering_term_nulls_direction_2 = "select_ordering_term_nulls_direction_2",
    select_limit = "select_limit",
    select_limit_offset_1 = "select_limit_offset_1",
    select_limit_offset_2 = "select_limit_offset_2",
    select_group_by = "select_group_by",
    select_group_by_$0 = "select_group_by_$0",
    expression_list = "expression_list",
    expression_list_$0 = "expression_list_$0",
    expression = "expression",
    expression_column_1 = "expression_column_1",
    expression_column_2 = "expression_column_2",
    expression_column_$0 = "expression_column_$0",
    expression_column_$1 = "expression_column_$1",
    expression_column_$2 = "expression_column_$2",
    expression_unary = "expression_unary",
    expression_non_front_recursive_1 = "expression_non_front_recursive_1",
    expression_non_front_recursive_2 = "expression_non_front_recursive_2",
    expression_non_front_recursive_3 = "expression_non_front_recursive_3",
    expression_function_invocation = "expression_function_invocation",
    expression_select_or_expression_list = "expression_select_or_expression_list",
    expression_select_or_expression_list_$0_1 = "expression_select_or_expression_list_$0_1",
    expression_select_or_expression_list_$0_2 = "expression_select_or_expression_list_$0_2",
    expression_select_or_expression_list_$1 = "expression_select_or_expression_list_$1",
    expression_select_or_expression_list_$1_$0_1 = "expression_select_or_expression_list_$1_$0_1",
    expression_select_or_expression_list_$1_$0_2 = "expression_select_or_expression_list_$1_$0_2",
    expression_in = "expression_in",
    expression_exists_assertion = "expression_exists_assertion",
    expression_null_assertion_1 = "expression_null_assertion_1",
    expression_null_assertion_2 = "expression_null_assertion_2",
    expression_null_assertion_3 = "expression_null_assertion_3",
    expression_null_assertion_$0 = "expression_null_assertion_$0",
    expression_between = "expression_between",
    expression_binary = "expression_binary",
    expression_parens = "expression_parens",
    expression_front_recursive_1 = "expression_front_recursive_1",
    expression_front_recursive_2 = "expression_front_recursive_2",
    expression_front_recursive_3 = "expression_front_recursive_3",
    expression_front_recursive_4 = "expression_front_recursive_4",
    expression_front_recursive_5 = "expression_front_recursive_5",
    expression_front_recursive_6 = "expression_front_recursive_6",
    expression_front_recursive_7 = "expression_front_recursive_7",
    expression_front_recursive_8 = "expression_front_recursive_8",
    select_with = "select_with",
    identifier = "identifier",
    num = "num",
    quoted_string = "quoted_string",
    unary_operator = "unary_operator",
    binary_operator_1 = "binary_operator_1",
    binary_operator_2 = "binary_operator_2",
    binary_operator_3 = "binary_operator_3",
    binary_operator_4 = "binary_operator_4",
    binary_operator_5 = "binary_operator_5",
    binary_operator_6 = "binary_operator_6",
    binary_operator_7 = "binary_operator_7",
    binary_operator_8 = "binary_operator_8",
    binary_operator_9 = "binary_operator_9",
    binary_operator_10 = "binary_operator_10",
    binary_operator_11 = "binary_operator_11",
    binary_operator_12 = "binary_operator_12",
    value_literal_1 = "value_literal_1",
    value_literal_2 = "value_literal_2",
    value_literal_3 = "value_literal_3",
    value_literal_4 = "value_literal_4",
    value_literal_5 = "value_literal_5",
    value_literal_6 = "value_literal_6",
    all_literals_1 = "all_literals_1",
    all_literals_2 = "all_literals_2",
    all_literals_3 = "all_literals_3",
    all_literals_4 = "all_literals_4",
    all_literals_5 = "all_literals_5",
    all_literals_6 = "all_literals_6",
    all_literals_7 = "all_literals_7",
    all_literals_8 = "all_literals_8",
    all_literals_9 = "all_literals_9",
    all_literals_10 = "all_literals_10",
    all_literals_11 = "all_literals_11",
    all_literals_12 = "all_literals_12",
    all_literals_13 = "all_literals_13",
    all_literals_14 = "all_literals_14",
    all_literals_15 = "all_literals_15",
    all_literals_16 = "all_literals_16",
    all_literals_17 = "all_literals_17",
    all_literals_18 = "all_literals_18",
    all_literals_19 = "all_literals_19",
    all_literals_20 = "all_literals_20",
    all_literals_21 = "all_literals_21",
    all_literals_22 = "all_literals_22",
    all_literals_23 = "all_literals_23",
    all_literals_24 = "all_literals_24",
    all_literals_25 = "all_literals_25",
    all_literals_26 = "all_literals_26",
    all_literals_27 = "all_literals_27",
    all_literals_28 = "all_literals_28",
    all_literals_29 = "all_literals_29",
    all_literals_30 = "all_literals_30",
    all_literals_31 = "all_literals_31",
    all_literals_32 = "all_literals_32",
    all_literals_33 = "all_literals_33",
    all_literals_34 = "all_literals_34",
    all_literals_35 = "all_literals_35",
    all_literals_36 = "all_literals_36",
    all_literals_37 = "all_literals_37",
    all_literals_38 = "all_literals_38",
    all_literals_39 = "all_literals_39",
    all_literals_40 = "all_literals_40",
    all_literals_41 = "all_literals_41",
    all_literals_42 = "all_literals_42",
    all_literals_43 = "all_literals_43",
    all_literals_44 = "all_literals_44",
    all_literals_45 = "all_literals_45",
    all_literals_46 = "all_literals_46",
    all_literals_47 = "all_literals_47",
    all_literals_48 = "all_literals_48",
    all_literals_49 = "all_literals_49",
    all_literals_50 = "all_literals_50",
    all_literals_51 = "all_literals_51",
    all_literals_52 = "all_literals_52",
    all_literals_53 = "all_literals_53",
    all_literals_54 = "all_literals_54",
    all_literals_55 = "all_literals_55",
    all_literals_56 = "all_literals_56",
    literal_order = "literal_order",
    literal_by = "literal_by",
    literal_collate = "literal_collate",
    literal_asc = "literal_asc",
    literal_desc = "literal_desc",
    literal_nulls = "literal_nulls",
    literal_first = "literal_first",
    literal_last = "literal_last",
    literal_limit = "literal_limit",
    literal_offset = "literal_offset",
    literal_group = "literal_group",
    literal_having = "literal_having",
    literal_and = "literal_and",
    literal_or = "literal_or",
    literal_plus = "literal_plus",
    literal_minus = "literal_minus",
    literal_slash = "literal_slash",
    literal_gte = "literal_gte",
    literal_lte = "literal_lte",
    literal_gt = "literal_gt",
    literal_lt = "literal_lt",
    literal_equal = "literal_equal",
    literal_not_equal_1 = "literal_not_equal_1",
    literal_not_equal_2 = "literal_not_equal_2",
    literal_not = "literal_not",
    literal_true = "literal_true",
    literal_false = "literal_false",
    literal_null = "literal_null",
    literal_not_null = "literal_not_null",
    literal_is_null = "literal_is_null",
    literal_is = "literal_is",
    literal_between = "literal_between",
    literal_exists = "literal_exists",
    literal_in = "literal_in",
    literal_comma = "literal_comma",
    literal_period = "literal_period",
    literal_asterisk = "literal_asterisk",
    literal_semi_colon = "literal_semi_colon",
    literal_open_paren = "literal_open_paren",
    literal_close_paren = "literal_close_paren",
    literal_on = "literal_on",
    literal_using = "literal_using",
    literal_natural = "literal_natural",
    literal_outer = "literal_outer",
    literal_left = "literal_left",
    literal_right = "literal_right",
    literal_inner = "literal_inner",
    literal_full = "literal_full",
    literal_cross = "literal_cross",
    literal_join = "literal_join",
    literal_from = "literal_from",
    literal_with = "literal_with",
    literal_select = "literal_select",
    literal_where = "literal_where",
    literal_all = "literal_all",
    literal_distinct = "literal_distinct",
    literal_as = "literal_as",
    whitespace = "whitespace",
    $EOF = "$EOF",
}
export interface start {
    kind: ASTKinds.start;
    stmt_list: stmt_list;
}
export interface stmt_list {
    kind: ASTKinds.stmt_list;
    stmt: stmt;
    other_stmts: stmt_list_$0[];
}
export interface stmt_list_$0 {
    kind: ASTKinds.stmt_list_$0;
    stmt: stmt;
}
export type stmt = stmt_select;
export interface stmt_select {
    kind: ASTKinds.stmt_select;
    select_with: Nullable<select_with>;
    select_core: select_core;
}
export interface select_core {
    kind: ASTKinds.select_core;
    qualifier: Nullable<select_qualifier>;
    columns: select_result_column_list;
    from: Nullable<select_from>;
    where: Nullable<select_where>;
    group_by: Nullable<select_group_by>;
    order_by: Nullable<select_order>;
    limit: Nullable<select_limit>;
}
export type select_qualifier = select_qualifier_1 | select_qualifier_2;
export type select_qualifier_1 = literal_all;
export type select_qualifier_2 = literal_distinct;
export interface select_result_column_list {
    kind: ASTKinds.select_result_column_list;
    select_result_column: select_result_column;
    other_result_columns: select_result_column_list_$0[];
}
export interface select_result_column_list_$0 {
    kind: ASTKinds.select_result_column_list_$0;
    select_result_column: select_result_column;
}
export type select_result_column = select_result_column_1 | select_result_column_2 | select_result_column_3;
export type select_result_column_1 = select_result_column_whole_table;
export type select_result_column_2 = literal_asterisk;
export type select_result_column_3 = select_result_column_expression;
export interface select_result_column_expression {
    kind: ASTKinds.select_result_column_expression;
    expression: expression;
    column_alias: Nullable<identifier>;
}
export interface select_result_column_whole_table {
    kind: ASTKinds.select_result_column_whole_table;
    table_name: identifier;
}
export type select_from = select_from_1 | select_from_2;
export interface select_from_1 {
    kind: ASTKinds.select_from_1;
    join: select_from_join;
}
export interface select_from_2 {
    kind: ASTKinds.select_from_2;
    table_or_subquery: select_from_table_or_subquery_list;
}
export interface select_from_table_or_subquery_list {
    kind: ASTKinds.select_from_table_or_subquery_list;
    table_or_subquery: select_from_table_or_subquery;
    other_table_or_subqueries: select_from_table_or_subquery_list_$0[];
}
export interface select_from_table_or_subquery_list_$0 {
    kind: ASTKinds.select_from_table_or_subquery_list_$0;
    table_or_subquery: select_from_table_or_subquery;
}
export type select_from_table_or_subquery = select_from_table_or_subquery_1 | select_from_table_or_subquery_2 | select_from_table_or_subquery_3;
export interface select_from_table_or_subquery_1 {
    kind: ASTKinds.select_from_table_or_subquery_1;
    table_or_subquery: select_from;
}
export interface select_from_table_or_subquery_2 {
    kind: ASTKinds.select_from_table_or_subquery_2;
    select_stmt: stmt_select;
    alias: Nullable<identifier>;
}
export interface select_from_table_or_subquery_3 {
    kind: ASTKinds.select_from_table_or_subquery_3;
    schema_name: Nullable<select_from_table_or_subquery_$0>;
    table_name: identifier;
    alias: Nullable<identifier>;
}
export interface select_from_table_or_subquery_$0 {
    kind: ASTKinds.select_from_table_or_subquery_$0;
    schema_name: identifier;
}
export interface select_from_join {
    kind: ASTKinds.select_from_join;
    table_a: select_from_table_or_subquery;
    joins: select_from_join_$0[];
}
export interface select_from_join_$0 {
    kind: ASTKinds.select_from_join_$0;
    select_from_join_operator: select_from_join_operator;
    select_from_table_or_subquery: select_from_table_or_subquery;
    select_from_join_constraint: Nullable<select_from_join_constraint>;
}
export interface column_name_list {
    kind: ASTKinds.column_name_list;
    column: identifier;
    other_columns: Nullable<column_name_list_$0>;
}
export interface column_name_list_$0 {
    kind: ASTKinds.column_name_list_$0;
    column: identifier;
}
export type select_from_join_constraint = select_from_join_constraint_1 | select_from_join_constraint_2;
export interface select_from_join_constraint_1 {
    kind: ASTKinds.select_from_join_constraint_1;
    expression: expression;
}
export interface select_from_join_constraint_2 {
    kind: ASTKinds.select_from_join_constraint_2;
    columns: column_name_list;
}
export type select_from_join_operator = select_from_join_operator_1 | select_from_join_operator_2 | select_from_join_operator_3 | select_from_join_operator_4 | select_from_join_operator_5 | select_from_join_operator_6;
export interface select_from_join_operator_1 {
    kind: ASTKinds.select_from_join_operator_1;
    type: Nullable<literal_natural>;
}
export interface select_from_join_operator_2 {
    kind: ASTKinds.select_from_join_operator_2;
    natural: Nullable<literal_natural>;
    type: literal_left;
    outer: Nullable<literal_outer>;
}
export interface select_from_join_operator_3 {
    kind: ASTKinds.select_from_join_operator_3;
    natural: Nullable<literal_natural>;
    type: literal_right;
    outer: Nullable<literal_outer>;
}
export interface select_from_join_operator_4 {
    kind: ASTKinds.select_from_join_operator_4;
    natural: Nullable<literal_natural>;
    type: literal_full;
    outer: Nullable<literal_outer>;
}
export interface select_from_join_operator_5 {
    kind: ASTKinds.select_from_join_operator_5;
    natural: Nullable<literal_natural>;
    type: literal_inner;
}
export interface select_from_join_operator_6 {
    kind: ASTKinds.select_from_join_operator_6;
    type: literal_cross;
}
export interface select_where {
    kind: ASTKinds.select_where;
    expression: expression;
}
export interface select_order {
    kind: ASTKinds.select_order;
    select_ordering_term_list: select_ordering_term_list;
}
export interface select_ordering_term_list {
    kind: ASTKinds.select_ordering_term_list;
    term: select_ordering_term;
    other_terms: select_ordering_term_list_$0[];
}
export interface select_ordering_term_list_$0 {
    kind: ASTKinds.select_ordering_term_list_$0;
    term: select_ordering_term;
}
export interface select_ordering_term {
    kind: ASTKinds.select_ordering_term;
    expression: expression;
    collate: Nullable<select_ordering_term_$0>;
    sort_direction: Nullable<select_ordering_term_$1>;
    nulls_direction: Nullable<select_ordering_term_$2>;
}
export type select_ordering_term_$0 = select_ordering_term_collate;
export type select_ordering_term_$1 = select_ordering_term_sort_direction;
export type select_ordering_term_$2 = select_ordering_term_nulls_direction;
export type select_ordering_term_sort_direction = select_ordering_term_sort_direction_1 | select_ordering_term_sort_direction_2;
export interface select_ordering_term_sort_direction_1 {
    kind: ASTKinds.select_ordering_term_sort_direction_1;
    value: literal_asc;
}
export interface select_ordering_term_sort_direction_2 {
    kind: ASTKinds.select_ordering_term_sort_direction_2;
    value: literal_desc;
}
export interface select_ordering_term_collate {
    kind: ASTKinds.select_ordering_term_collate;
    collation_name: identifier;
}
export type select_ordering_term_nulls_direction = select_ordering_term_nulls_direction_1 | select_ordering_term_nulls_direction_2;
export interface select_ordering_term_nulls_direction_1 {
    kind: ASTKinds.select_ordering_term_nulls_direction_1;
    value: literal_first;
}
export interface select_ordering_term_nulls_direction_2 {
    kind: ASTKinds.select_ordering_term_nulls_direction_2;
    value: literal_last;
}
export interface select_limit {
    kind: ASTKinds.select_limit;
    expression: expression;
    offset: Nullable<select_limit_offset>;
}
export type select_limit_offset = select_limit_offset_1 | select_limit_offset_2;
export interface select_limit_offset_1 {
    kind: ASTKinds.select_limit_offset_1;
    offset: expression;
}
export interface select_limit_offset_2 {
    kind: ASTKinds.select_limit_offset_2;
    offset: expression;
}
export interface select_group_by {
    kind: ASTKinds.select_group_by;
    expression_list: expression_list;
    having: Nullable<select_group_by_$0>;
}
export interface select_group_by_$0 {
    kind: ASTKinds.select_group_by_$0;
    expression: expression;
}
export interface expression_list {
    kind: ASTKinds.expression_list;
    expression: expression;
    other_expressions: expression_list_$0[];
}
export interface expression_list_$0 {
    kind: ASTKinds.expression_list_$0;
    expression: expression;
}
export type expression = expression_front_recursive;
export type expression_column = expression_column_1 | expression_column_2;
export interface expression_column_1 {
    kind: ASTKinds.expression_column_1;
    schema_name: expression_column_$0;
    table_name: expression_column_$1;
    column_name: identifier;
}
export interface expression_column_2 {
    kind: ASTKinds.expression_column_2;
    table_name: Nullable<expression_column_$2>;
    column_name: identifier;
}
export interface expression_column_$0 {
    kind: ASTKinds.expression_column_$0;
    schema_name: identifier;
}
export interface expression_column_$1 {
    kind: ASTKinds.expression_column_$1;
    table_name: identifier;
}
export interface expression_column_$2 {
    kind: ASTKinds.expression_column_$2;
    table_name: identifier;
}
export interface expression_unary {
    kind: ASTKinds.expression_unary;
    unary_operator: unary_operator;
    expression: expression;
}
export type expression_non_front_recursive = expression_non_front_recursive_1 | expression_non_front_recursive_2 | expression_non_front_recursive_3;
export type expression_non_front_recursive_1 = expression_column;
export type expression_non_front_recursive_2 = expression_unary;
export type expression_non_front_recursive_3 = value_literal;
export interface expression_function_invocation {
    kind: ASTKinds.expression_function_invocation;
    function_name: identifier;
    expression_list: Nullable<expression_list>;
}
export interface expression_select_or_expression_list {
    kind: ASTKinds.expression_select_or_expression_list;
    expression_or_select: expression_select_or_expression_list_$0;
    other_expression_or_selects: expression_select_or_expression_list_$1[];
}
export type expression_select_or_expression_list_$0 = expression_select_or_expression_list_$0_1 | expression_select_or_expression_list_$0_2;
export interface expression_select_or_expression_list_$0_1 {
    kind: ASTKinds.expression_select_or_expression_list_$0_1;
    expression: expression;
}
export interface expression_select_or_expression_list_$0_2 {
    kind: ASTKinds.expression_select_or_expression_list_$0_2;
    stmt_select: stmt_select;
}
export interface expression_select_or_expression_list_$1 {
    kind: ASTKinds.expression_select_or_expression_list_$1;
    expression_or_select: expression_select_or_expression_list_$1_$0;
}
export type expression_select_or_expression_list_$1_$0 = expression_select_or_expression_list_$1_$0_1 | expression_select_or_expression_list_$1_$0_2;
export interface expression_select_or_expression_list_$1_$0_1 {
    kind: ASTKinds.expression_select_or_expression_list_$1_$0_1;
    expression: expression;
}
export interface expression_select_or_expression_list_$1_$0_2 {
    kind: ASTKinds.expression_select_or_expression_list_$1_$0_2;
    stmt_select: stmt_select;
}
export interface expression_in {
    kind: ASTKinds.expression_in;
    expression: expression_non_front_recursive;
    invert: Nullable<literal_not>;
    values: expression_select_or_expression_list;
}
export interface expression_exists_assertion {
    kind: ASTKinds.expression_exists_assertion;
    invert: Nullable<literal_not>;
    stmt_select: stmt_select;
}
export type expression_null_assertion = expression_null_assertion_1 | expression_null_assertion_2 | expression_null_assertion_3;
export interface expression_null_assertion_1 {
    kind: ASTKinds.expression_null_assertion_1;
    expression: expression_non_front_recursive;
    not_null: expression_null_assertion_$0;
}
export interface expression_null_assertion_2 {
    kind: ASTKinds.expression_null_assertion_2;
    expression: expression_non_front_recursive;
    not_null: literal_not_null;
}
export interface expression_null_assertion_3 {
    kind: ASTKinds.expression_null_assertion_3;
    expression: expression_non_front_recursive;
    is_null: literal_is_null;
}
export interface expression_null_assertion_$0 {
    kind: ASTKinds.expression_null_assertion_$0;
}
export interface expression_between {
    kind: ASTKinds.expression_between;
    expression: expression_non_front_recursive;
    invert: Nullable<literal_not>;
    left_expression: expression_non_front_recursive;
    right_expression: expression;
}
export interface expression_binary {
    kind: ASTKinds.expression_binary;
    expression_a: expression_non_front_recursive;
    operator: binary_operator;
    expression_b: expression;
}
export interface expression_parens {
    kind: ASTKinds.expression_parens;
    expression: expression_front_recursive;
}
export type expression_front_recursive = expression_front_recursive_1 | expression_front_recursive_2 | expression_front_recursive_3 | expression_front_recursive_4 | expression_front_recursive_5 | expression_front_recursive_6 | expression_front_recursive_7 | expression_front_recursive_8;
export type expression_front_recursive_1 = expression_in;
export type expression_front_recursive_2 = expression_exists_assertion;
export type expression_front_recursive_3 = expression_parens;
export type expression_front_recursive_4 = expression_null_assertion;
export type expression_front_recursive_5 = expression_between;
export type expression_front_recursive_6 = expression_binary;
export type expression_front_recursive_7 = expression_function_invocation;
export type expression_front_recursive_8 = expression_non_front_recursive;
export type select_with = literal_with;
export interface identifier {
    kind: ASTKinds.identifier;
    value: string;
}
export interface num {
    kind: ASTKinds.num;
    value: string;
}
export interface quoted_string {
    kind: ASTKinds.quoted_string;
    value: string;
}
export type unary_operator = literal_not;
export type binary_operator = binary_operator_1 | binary_operator_2 | binary_operator_3 | binary_operator_4 | binary_operator_5 | binary_operator_6 | binary_operator_7 | binary_operator_8 | binary_operator_9 | binary_operator_10 | binary_operator_11 | binary_operator_12;
export type binary_operator_1 = literal_and;
export type binary_operator_2 = literal_or;
export type binary_operator_3 = literal_plus;
export type binary_operator_4 = literal_minus;
export type binary_operator_5 = literal_asterisk;
export type binary_operator_6 = literal_slash;
export type binary_operator_7 = literal_gte;
export type binary_operator_8 = literal_lte;
export type binary_operator_9 = literal_gt;
export type binary_operator_10 = literal_lt;
export type binary_operator_11 = literal_equal;
export type binary_operator_12 = literal_not_equal;
export type value_literal = value_literal_1 | value_literal_2 | value_literal_3 | value_literal_4 | value_literal_5 | value_literal_6;
export type value_literal_1 = identifier;
export type value_literal_2 = num;
export type value_literal_3 = literal_true;
export type value_literal_4 = literal_false;
export type value_literal_5 = literal_null;
export type value_literal_6 = quoted_string;
export type all_literals = all_literals_1 | all_literals_2 | all_literals_3 | all_literals_4 | all_literals_5 | all_literals_6 | all_literals_7 | all_literals_8 | all_literals_9 | all_literals_10 | all_literals_11 | all_literals_12 | all_literals_13 | all_literals_14 | all_literals_15 | all_literals_16 | all_literals_17 | all_literals_18 | all_literals_19 | all_literals_20 | all_literals_21 | all_literals_22 | all_literals_23 | all_literals_24 | all_literals_25 | all_literals_26 | all_literals_27 | all_literals_28 | all_literals_29 | all_literals_30 | all_literals_31 | all_literals_32 | all_literals_33 | all_literals_34 | all_literals_35 | all_literals_36 | all_literals_37 | all_literals_38 | all_literals_39 | all_literals_40 | all_literals_41 | all_literals_42 | all_literals_43 | all_literals_44 | all_literals_45 | all_literals_46 | all_literals_47 | all_literals_48 | all_literals_49 | all_literals_50 | all_literals_51 | all_literals_52 | all_literals_53 | all_literals_54 | all_literals_55 | all_literals_56;
export type all_literals_1 = literal_and;
export type all_literals_2 = literal_or;
export type all_literals_3 = literal_plus;
export type all_literals_4 = literal_minus;
export type all_literals_5 = literal_slash;
export type all_literals_6 = literal_gte;
export type all_literals_7 = literal_lte;
export type all_literals_8 = literal_lt;
export type all_literals_9 = literal_gt;
export type all_literals_10 = literal_equal;
export type all_literals_11 = literal_not_equal;
export type all_literals_12 = literal_not;
export type all_literals_13 = literal_true;
export type all_literals_14 = literal_false;
export type all_literals_15 = literal_null;
export type all_literals_16 = literal_comma;
export type all_literals_17 = literal_asterisk;
export type all_literals_18 = literal_period;
export type all_literals_19 = literal_semi_colon;
export type all_literals_20 = literal_open_paren;
export type all_literals_21 = literal_close_paren;
export type all_literals_22 = literal_on;
export type all_literals_23 = literal_using;
export type all_literals_24 = literal_natural;
export type all_literals_25 = literal_outer;
export type all_literals_26 = literal_left;
export type all_literals_27 = literal_right;
export type all_literals_28 = literal_inner;
export type all_literals_29 = literal_full;
export type all_literals_30 = literal_cross;
export type all_literals_31 = literal_join;
export type all_literals_32 = literal_from;
export type all_literals_33 = literal_with;
export type all_literals_34 = literal_select;
export type all_literals_35 = literal_where;
export type all_literals_36 = literal_all;
export type all_literals_37 = literal_distinct;
export type all_literals_38 = literal_as;
export type all_literals_39 = literal_order;
export type all_literals_40 = literal_by;
export type all_literals_41 = literal_collate;
export type all_literals_42 = literal_asc;
export type all_literals_43 = literal_desc;
export type all_literals_44 = literal_nulls;
export type all_literals_45 = literal_first;
export type all_literals_46 = literal_last;
export type all_literals_47 = literal_limit;
export type all_literals_48 = literal_offset;
export type all_literals_49 = literal_not_null;
export type all_literals_50 = literal_is_null;
export type all_literals_51 = literal_is;
export type all_literals_52 = literal_between;
export type all_literals_53 = literal_exists;
export type all_literals_54 = literal_in;
export type all_literals_55 = literal_group;
export type all_literals_56 = literal_having;
export interface literal_order {
    kind: ASTKinds.literal_order;
    literal: string;
}
export interface literal_by {
    kind: ASTKinds.literal_by;
    literal: string;
}
export interface literal_collate {
    kind: ASTKinds.literal_collate;
    literal: string;
}
export interface literal_asc {
    kind: ASTKinds.literal_asc;
    literal: string;
}
export interface literal_desc {
    kind: ASTKinds.literal_desc;
    literal: string;
}
export interface literal_nulls {
    kind: ASTKinds.literal_nulls;
    literal: string;
}
export interface literal_first {
    kind: ASTKinds.literal_first;
    literal: string;
}
export interface literal_last {
    kind: ASTKinds.literal_last;
    literal: string;
}
export interface literal_limit {
    kind: ASTKinds.literal_limit;
    literal: string;
}
export interface literal_offset {
    kind: ASTKinds.literal_offset;
    literal: string;
}
export interface literal_group {
    kind: ASTKinds.literal_group;
    literal: string;
}
export interface literal_having {
    kind: ASTKinds.literal_having;
    literal: string;
}
export interface literal_and {
    kind: ASTKinds.literal_and;
    literal: string;
}
export interface literal_or {
    kind: ASTKinds.literal_or;
    literal: string;
}
export interface literal_plus {
    kind: ASTKinds.literal_plus;
    literal: string;
}
export interface literal_minus {
    kind: ASTKinds.literal_minus;
    literal: string;
}
export interface literal_slash {
    kind: ASTKinds.literal_slash;
    literal: string;
}
export interface literal_gte {
    kind: ASTKinds.literal_gte;
    literal: string;
}
export interface literal_lte {
    kind: ASTKinds.literal_lte;
    literal: string;
}
export interface literal_gt {
    kind: ASTKinds.literal_gt;
    literal: string;
}
export interface literal_lt {
    kind: ASTKinds.literal_lt;
    literal: string;
}
export interface literal_equal {
    kind: ASTKinds.literal_equal;
    literal: string;
}
export type literal_not_equal = literal_not_equal_1 | literal_not_equal_2;
export interface literal_not_equal_1 {
    kind: ASTKinds.literal_not_equal_1;
    literal: string;
}
export interface literal_not_equal_2 {
    kind: ASTKinds.literal_not_equal_2;
    literal: string;
}
export interface literal_not {
    kind: ASTKinds.literal_not;
    literal: string;
}
export interface literal_true {
    kind: ASTKinds.literal_true;
    literal: string;
}
export interface literal_false {
    kind: ASTKinds.literal_false;
    literal: string;
}
export interface literal_null {
    kind: ASTKinds.literal_null;
    literal: string;
}
export interface literal_not_null {
    kind: ASTKinds.literal_not_null;
    literal: string;
}
export interface literal_is_null {
    kind: ASTKinds.literal_is_null;
    literal: string;
}
export interface literal_is {
    kind: ASTKinds.literal_is;
    literal: string;
}
export interface literal_between {
    kind: ASTKinds.literal_between;
    literal: string;
}
export interface literal_exists {
    kind: ASTKinds.literal_exists;
    literal: string;
}
export interface literal_in {
    kind: ASTKinds.literal_in;
    literal: string;
}
export interface literal_comma {
    kind: ASTKinds.literal_comma;
    literal: string;
}
export interface literal_period {
    kind: ASTKinds.literal_period;
    literal: string;
}
export interface literal_asterisk {
    kind: ASTKinds.literal_asterisk;
    literal: string;
}
export interface literal_semi_colon {
    kind: ASTKinds.literal_semi_colon;
    literal: string;
}
export interface literal_open_paren {
    kind: ASTKinds.literal_open_paren;
    literal: string;
}
export interface literal_close_paren {
    kind: ASTKinds.literal_close_paren;
    literal: string;
}
export interface literal_on {
    kind: ASTKinds.literal_on;
    literal: string;
}
export interface literal_using {
    kind: ASTKinds.literal_using;
    literal: string;
}
export interface literal_natural {
    kind: ASTKinds.literal_natural;
    literal: string;
}
export interface literal_outer {
    kind: ASTKinds.literal_outer;
    literal: string;
}
export interface literal_left {
    kind: ASTKinds.literal_left;
    literal: string;
}
export interface literal_right {
    kind: ASTKinds.literal_right;
    literal: string;
}
export interface literal_inner {
    kind: ASTKinds.literal_inner;
    literal: string;
}
export interface literal_full {
    kind: ASTKinds.literal_full;
    literal: string;
}
export interface literal_cross {
    kind: ASTKinds.literal_cross;
    literal: string;
}
export interface literal_join {
    kind: ASTKinds.literal_join;
    literal: string;
}
export interface literal_from {
    kind: ASTKinds.literal_from;
    literal: string;
}
export interface literal_with {
    kind: ASTKinds.literal_with;
    literal: string;
}
export interface literal_select {
    kind: ASTKinds.literal_select;
    literal: string;
}
export interface literal_where {
    kind: ASTKinds.literal_where;
    literal: string;
}
export interface literal_all {
    kind: ASTKinds.literal_all;
    literal: string;
}
export interface literal_distinct {
    kind: ASTKinds.literal_distinct;
    literal: string;
}
export interface literal_as {
    kind: ASTKinds.literal_as;
    literal: string;
}
export type whitespace = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.run<start>($$dpth,
            () => {
                let $scope$stmt_list: Nullable<stmt_list>;
                let $$res: Nullable<start> = null;
                if (true
                    && ($scope$stmt_list = this.matchstmt_list($$dpth + 1, $$cr)) !== null
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.start, stmt_list: $scope$stmt_list};
                }
                return $$res;
            });
    }
    public matchstmt_list($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt_list> {
        return this.run<stmt_list>($$dpth,
            () => {
                let $scope$stmt: Nullable<stmt>;
                let $scope$other_stmts: Nullable<stmt_list_$0[]>;
                let $$res: Nullable<stmt_list> = null;
                if (true
                    && ($scope$stmt = this.matchstmt($$dpth + 1, $$cr)) !== null
                    && ($scope$other_stmts = this.loop<stmt_list_$0>(() => this.matchstmt_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.stmt_list, stmt: $scope$stmt, other_stmts: $scope$other_stmts};
                }
                return $$res;
            });
    }
    public matchstmt_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt_list_$0> {
        return this.run<stmt_list_$0>($$dpth,
            () => {
                let $scope$stmt: Nullable<stmt>;
                let $$res: Nullable<stmt_list_$0> = null;
                if (true
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_semi_colon($$dpth + 1, $$cr) !== null
                    && ($scope$stmt = this.matchstmt($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.stmt_list_$0, stmt: $scope$stmt};
                }
                return $$res;
            });
    }
    public matchstmt($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt> {
        return this.matchstmt_select($$dpth + 1, $$cr);
    }
    public matchstmt_select($$dpth: number, $$cr?: ErrorTracker): Nullable<stmt_select> {
        return this.run<stmt_select>($$dpth,
            () => {
                let $scope$select_with: Nullable<Nullable<select_with>>;
                let $scope$select_core: Nullable<select_core>;
                let $$res: Nullable<stmt_select> = null;
                if (true
                    && (($scope$select_with = this.matchselect_with($$dpth + 1, $$cr)) || true)
                    && ($scope$select_core = this.matchselect_core($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.stmt_select, select_with: $scope$select_with, select_core: $scope$select_core};
                }
                return $$res;
            });
    }
    public matchselect_core($$dpth: number, $$cr?: ErrorTracker): Nullable<select_core> {
        return this.run<select_core>($$dpth,
            () => {
                let $scope$qualifier: Nullable<Nullable<select_qualifier>>;
                let $scope$columns: Nullable<select_result_column_list>;
                let $scope$from: Nullable<Nullable<select_from>>;
                let $scope$where: Nullable<Nullable<select_where>>;
                let $scope$group_by: Nullable<Nullable<select_group_by>>;
                let $scope$order_by: Nullable<Nullable<select_order>>;
                let $scope$limit: Nullable<Nullable<select_limit>>;
                let $$res: Nullable<select_core> = null;
                if (true
                    && this.matchliteral_select($$dpth + 1, $$cr) !== null
                    && (($scope$qualifier = this.matchselect_qualifier($$dpth + 1, $$cr)) || true)
                    && ($scope$columns = this.matchselect_result_column_list($$dpth + 1, $$cr)) !== null
                    && (($scope$from = this.matchselect_from($$dpth + 1, $$cr)) || true)
                    && (($scope$where = this.matchselect_where($$dpth + 1, $$cr)) || true)
                    && (($scope$group_by = this.matchselect_group_by($$dpth + 1, $$cr)) || true)
                    && (($scope$order_by = this.matchselect_order($$dpth + 1, $$cr)) || true)
                    && (($scope$limit = this.matchselect_limit($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_core, qualifier: $scope$qualifier, columns: $scope$columns, from: $scope$from, where: $scope$where, group_by: $scope$group_by, order_by: $scope$order_by, limit: $scope$limit};
                }
                return $$res;
            });
    }
    public matchselect_qualifier($$dpth: number, $$cr?: ErrorTracker): Nullable<select_qualifier> {
        return this.choice<select_qualifier>([
            () => this.matchselect_qualifier_1($$dpth + 1, $$cr),
            () => this.matchselect_qualifier_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_qualifier_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_qualifier_1> {
        return this.matchliteral_all($$dpth + 1, $$cr);
    }
    public matchselect_qualifier_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_qualifier_2> {
        return this.matchliteral_distinct($$dpth + 1, $$cr);
    }
    public matchselect_result_column_list($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_list> {
        return this.run<select_result_column_list>($$dpth,
            () => {
                let $scope$select_result_column: Nullable<select_result_column>;
                let $scope$other_result_columns: Nullable<select_result_column_list_$0[]>;
                let $$res: Nullable<select_result_column_list> = null;
                if (true
                    && ($scope$select_result_column = this.matchselect_result_column($$dpth + 1, $$cr)) !== null
                    && ($scope$other_result_columns = this.loop<select_result_column_list_$0>(() => this.matchselect_result_column_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_result_column_list, select_result_column: $scope$select_result_column, other_result_columns: $scope$other_result_columns};
                }
                return $$res;
            });
    }
    public matchselect_result_column_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_list_$0> {
        return this.run<select_result_column_list_$0>($$dpth,
            () => {
                let $scope$select_result_column: Nullable<select_result_column>;
                let $$res: Nullable<select_result_column_list_$0> = null;
                if (true
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$select_result_column = this.matchselect_result_column($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_result_column_list_$0, select_result_column: $scope$select_result_column};
                }
                return $$res;
            });
    }
    public matchselect_result_column($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column> {
        return this.choice<select_result_column>([
            () => this.matchselect_result_column_1($$dpth + 1, $$cr),
            () => this.matchselect_result_column_2($$dpth + 1, $$cr),
            () => this.matchselect_result_column_3($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_result_column_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_1> {
        return this.matchselect_result_column_whole_table($$dpth + 1, $$cr);
    }
    public matchselect_result_column_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_2> {
        return this.matchliteral_asterisk($$dpth + 1, $$cr);
    }
    public matchselect_result_column_3($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_3> {
        return this.matchselect_result_column_expression($$dpth + 1, $$cr);
    }
    public matchselect_result_column_expression($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_expression> {
        return this.run<select_result_column_expression>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $scope$column_alias: Nullable<Nullable<identifier>>;
                let $$res: Nullable<select_result_column_expression> = null;
                if (true
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && ((this.matchliteral_as($$dpth + 1, $$cr)) || true)
                    && (($scope$column_alias = this.matchidentifier($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_result_column_expression, expression: $scope$expression, column_alias: $scope$column_alias};
                }
                return $$res;
            });
    }
    public matchselect_result_column_whole_table($$dpth: number, $$cr?: ErrorTracker): Nullable<select_result_column_whole_table> {
        return this.run<select_result_column_whole_table>($$dpth,
            () => {
                let $scope$table_name: Nullable<identifier>;
                let $$res: Nullable<select_result_column_whole_table> = null;
                if (true
                    && ($scope$table_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_period($$dpth + 1, $$cr) !== null
                    && this.matchliteral_asterisk($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_result_column_whole_table, table_name: $scope$table_name};
                }
                return $$res;
            });
    }
    public matchselect_from($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from> {
        return this.choice<select_from>([
            () => this.matchselect_from_1($$dpth + 1, $$cr),
            () => this.matchselect_from_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_1> {
        return this.run<select_from_1>($$dpth,
            () => {
                let $scope$join: Nullable<select_from_join>;
                let $$res: Nullable<select_from_1> = null;
                if (true
                    && this.matchliteral_from($$dpth + 1, $$cr) !== null
                    && ($scope$join = this.matchselect_from_join($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_1, join: $scope$join};
                }
                return $$res;
            });
    }
    public matchselect_from_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_2> {
        return this.run<select_from_2>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from_table_or_subquery_list>;
                let $$res: Nullable<select_from_2> = null;
                if (true
                    && this.matchliteral_from($$dpth + 1, $$cr) !== null
                    && ($scope$table_or_subquery = this.matchselect_from_table_or_subquery_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_2, table_or_subquery: $scope$table_or_subquery};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_list($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_list> {
        return this.run<select_from_table_or_subquery_list>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from_table_or_subquery>;
                let $scope$other_table_or_subqueries: Nullable<select_from_table_or_subquery_list_$0[]>;
                let $$res: Nullable<select_from_table_or_subquery_list> = null;
                if (true
                    && ($scope$table_or_subquery = this.matchselect_from_table_or_subquery($$dpth + 1, $$cr)) !== null
                    && ($scope$other_table_or_subqueries = this.loop<select_from_table_or_subquery_list_$0>(() => this.matchselect_from_table_or_subquery_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_list, table_or_subquery: $scope$table_or_subquery, other_table_or_subqueries: $scope$other_table_or_subqueries};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_list_$0> {
        return this.run<select_from_table_or_subquery_list_$0>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from_table_or_subquery>;
                let $$res: Nullable<select_from_table_or_subquery_list_$0> = null;
                if (true
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$table_or_subquery = this.matchselect_from_table_or_subquery($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_list_$0, table_or_subquery: $scope$table_or_subquery};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery> {
        return this.choice<select_from_table_or_subquery>([
            () => this.matchselect_from_table_or_subquery_1($$dpth + 1, $$cr),
            () => this.matchselect_from_table_or_subquery_2($$dpth + 1, $$cr),
            () => this.matchselect_from_table_or_subquery_3($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_table_or_subquery_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_1> {
        return this.run<select_from_table_or_subquery_1>($$dpth,
            () => {
                let $scope$table_or_subquery: Nullable<select_from>;
                let $$res: Nullable<select_from_table_or_subquery_1> = null;
                if (true
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$table_or_subquery = this.matchselect_from($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_1, table_or_subquery: $scope$table_or_subquery};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_2> {
        return this.run<select_from_table_or_subquery_2>($$dpth,
            () => {
                let $scope$select_stmt: Nullable<stmt_select>;
                let $scope$alias: Nullable<Nullable<identifier>>;
                let $$res: Nullable<select_from_table_or_subquery_2> = null;
                if (true
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$select_stmt = this.matchstmt_select($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                    && ((this.matchliteral_as($$dpth + 1, $$cr)) || true)
                    && (($scope$alias = this.matchidentifier($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_2, select_stmt: $scope$select_stmt, alias: $scope$alias};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_3($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_3> {
        return this.run<select_from_table_or_subquery_3>($$dpth,
            () => {
                let $scope$schema_name: Nullable<Nullable<select_from_table_or_subquery_$0>>;
                let $scope$table_name: Nullable<identifier>;
                let $scope$alias: Nullable<Nullable<identifier>>;
                let $$res: Nullable<select_from_table_or_subquery_3> = null;
                if (true
                    && (($scope$schema_name = this.matchselect_from_table_or_subquery_$0($$dpth + 1, $$cr)) || true)
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && ($scope$table_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && ((this.matchwhitespace($$dpth + 1, $$cr)) || true)
                    && (($scope$alias = this.matchidentifier($$dpth + 1, $$cr)) || true)
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_3, schema_name: $scope$schema_name, table_name: $scope$table_name, alias: $scope$alias};
                }
                return $$res;
            });
    }
    public matchselect_from_table_or_subquery_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_table_or_subquery_$0> {
        return this.run<select_from_table_or_subquery_$0>($$dpth,
            () => {
                let $scope$schema_name: Nullable<identifier>;
                let $$res: Nullable<select_from_table_or_subquery_$0> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$schema_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_period($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_table_or_subquery_$0, schema_name: $scope$schema_name};
                }
                return $$res;
            });
    }
    public matchselect_from_join($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join> {
        return this.run<select_from_join>($$dpth,
            () => {
                let $scope$table_a: Nullable<select_from_table_or_subquery>;
                let $scope$joins: Nullable<select_from_join_$0[]>;
                let $$res: Nullable<select_from_join> = null;
                if (true
                    && ($scope$table_a = this.matchselect_from_table_or_subquery($$dpth + 1, $$cr)) !== null
                    && ($scope$joins = this.loop<select_from_join_$0>(() => this.matchselect_from_join_$0($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join, table_a: $scope$table_a, joins: $scope$joins};
                }
                return $$res;
            });
    }
    public matchselect_from_join_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_$0> {
        return this.run<select_from_join_$0>($$dpth,
            () => {
                let $scope$select_from_join_operator: Nullable<select_from_join_operator>;
                let $scope$select_from_table_or_subquery: Nullable<select_from_table_or_subquery>;
                let $scope$select_from_join_constraint: Nullable<Nullable<select_from_join_constraint>>;
                let $$res: Nullable<select_from_join_$0> = null;
                if (true
                    && ($scope$select_from_join_operator = this.matchselect_from_join_operator($$dpth + 1, $$cr)) !== null
                    && ($scope$select_from_table_or_subquery = this.matchselect_from_table_or_subquery($$dpth + 1, $$cr)) !== null
                    && (($scope$select_from_join_constraint = this.matchselect_from_join_constraint($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_from_join_$0, select_from_join_operator: $scope$select_from_join_operator, select_from_table_or_subquery: $scope$select_from_table_or_subquery, select_from_join_constraint: $scope$select_from_join_constraint};
                }
                return $$res;
            });
    }
    public matchcolumn_name_list($$dpth: number, $$cr?: ErrorTracker): Nullable<column_name_list> {
        return this.run<column_name_list>($$dpth,
            () => {
                let $scope$column: Nullable<identifier>;
                let $scope$other_columns: Nullable<Nullable<column_name_list_$0>>;
                let $$res: Nullable<column_name_list> = null;
                if (true
                    && ($scope$column = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && (($scope$other_columns = this.matchcolumn_name_list_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.column_name_list, column: $scope$column, other_columns: $scope$other_columns};
                }
                return $$res;
            });
    }
    public matchcolumn_name_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<column_name_list_$0> {
        return this.run<column_name_list_$0>($$dpth,
            () => {
                let $scope$column: Nullable<identifier>;
                let $$res: Nullable<column_name_list_$0> = null;
                if (true
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$column = this.matchidentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.column_name_list_$0, column: $scope$column};
                }
                return $$res;
            });
    }
    public matchselect_from_join_constraint($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_constraint> {
        return this.choice<select_from_join_constraint>([
            () => this.matchselect_from_join_constraint_1($$dpth + 1, $$cr),
            () => this.matchselect_from_join_constraint_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_join_constraint_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_constraint_1> {
        return this.run<select_from_join_constraint_1>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<select_from_join_constraint_1> = null;
                if (true
                    && this.matchliteral_on($$dpth + 1, $$cr) !== null
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_constraint_1, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchselect_from_join_constraint_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_constraint_2> {
        return this.run<select_from_join_constraint_2>($$dpth,
            () => {
                let $scope$columns: Nullable<column_name_list>;
                let $$res: Nullable<select_from_join_constraint_2> = null;
                if (true
                    && this.matchliteral_using($$dpth + 1, $$cr) !== null
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$columns = this.matchcolumn_name_list($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_constraint_2, columns: $scope$columns};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator> {
        return this.choice<select_from_join_operator>([
            () => this.matchselect_from_join_operator_1($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_2($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_3($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_4($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_5($$dpth + 1, $$cr),
            () => this.matchselect_from_join_operator_6($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_from_join_operator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_1> {
        return this.run<select_from_join_operator_1>($$dpth,
            () => {
                let $scope$type: Nullable<Nullable<literal_natural>>;
                let $$res: Nullable<select_from_join_operator_1> = null;
                if (true
                    && (($scope$type = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_1, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_2> {
        return this.run<select_from_join_operator_2>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_left>;
                let $scope$outer: Nullable<Nullable<literal_outer>>;
                let $$res: Nullable<select_from_join_operator_2> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_left($$dpth + 1, $$cr)) !== null
                    && (($scope$outer = this.matchliteral_outer($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_2, natural: $scope$natural, type: $scope$type, outer: $scope$outer};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_3> {
        return this.run<select_from_join_operator_3>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_right>;
                let $scope$outer: Nullable<Nullable<literal_outer>>;
                let $$res: Nullable<select_from_join_operator_3> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_right($$dpth + 1, $$cr)) !== null
                    && (($scope$outer = this.matchliteral_outer($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_3, natural: $scope$natural, type: $scope$type, outer: $scope$outer};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_4($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_4> {
        return this.run<select_from_join_operator_4>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_full>;
                let $scope$outer: Nullable<Nullable<literal_outer>>;
                let $$res: Nullable<select_from_join_operator_4> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_full($$dpth + 1, $$cr)) !== null
                    && (($scope$outer = this.matchliteral_outer($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_4, natural: $scope$natural, type: $scope$type, outer: $scope$outer};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_5($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_5> {
        return this.run<select_from_join_operator_5>($$dpth,
            () => {
                let $scope$natural: Nullable<Nullable<literal_natural>>;
                let $scope$type: Nullable<literal_inner>;
                let $$res: Nullable<select_from_join_operator_5> = null;
                if (true
                    && (($scope$natural = this.matchliteral_natural($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchliteral_inner($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_5, natural: $scope$natural, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchselect_from_join_operator_6($$dpth: number, $$cr?: ErrorTracker): Nullable<select_from_join_operator_6> {
        return this.run<select_from_join_operator_6>($$dpth,
            () => {
                let $scope$type: Nullable<literal_cross>;
                let $$res: Nullable<select_from_join_operator_6> = null;
                if (true
                    && ($scope$type = this.matchliteral_cross($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_join($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.select_from_join_operator_6, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchselect_where($$dpth: number, $$cr?: ErrorTracker): Nullable<select_where> {
        return this.run<select_where>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<select_where> = null;
                if (true
                    && this.matchliteral_where($$dpth + 1, $$cr) !== null
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_where, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchselect_order($$dpth: number, $$cr?: ErrorTracker): Nullable<select_order> {
        return this.run<select_order>($$dpth,
            () => {
                let $scope$select_ordering_term_list: Nullable<select_ordering_term_list>;
                let $$res: Nullable<select_order> = null;
                if (true
                    && this.matchliteral_order($$dpth + 1, $$cr) !== null
                    && this.matchliteral_by($$dpth + 1, $$cr) !== null
                    && ($scope$select_ordering_term_list = this.matchselect_ordering_term_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_order, select_ordering_term_list: $scope$select_ordering_term_list};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term_list($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_list> {
        return this.run<select_ordering_term_list>($$dpth,
            () => {
                let $scope$term: Nullable<select_ordering_term>;
                let $scope$other_terms: Nullable<select_ordering_term_list_$0[]>;
                let $$res: Nullable<select_ordering_term_list> = null;
                if (true
                    && ($scope$term = this.matchselect_ordering_term($$dpth + 1, $$cr)) !== null
                    && ($scope$other_terms = this.loop<select_ordering_term_list_$0>(() => this.matchselect_ordering_term_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term_list, term: $scope$term, other_terms: $scope$other_terms};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_list_$0> {
        return this.run<select_ordering_term_list_$0>($$dpth,
            () => {
                let $scope$term: Nullable<select_ordering_term>;
                let $$res: Nullable<select_ordering_term_list_$0> = null;
                if (true
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$term = this.matchselect_ordering_term($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term_list_$0, term: $scope$term};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term> {
        return this.run<select_ordering_term>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $scope$collate: Nullable<Nullable<select_ordering_term_$0>>;
                let $scope$sort_direction: Nullable<Nullable<select_ordering_term_$1>>;
                let $scope$nulls_direction: Nullable<Nullable<select_ordering_term_$2>>;
                let $$res: Nullable<select_ordering_term> = null;
                if (true
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && (($scope$collate = this.matchselect_ordering_term_$0($$dpth + 1, $$cr)) || true)
                    && (($scope$sort_direction = this.matchselect_ordering_term_$1($$dpth + 1, $$cr)) || true)
                    && (($scope$nulls_direction = this.matchselect_ordering_term_$2($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term, expression: $scope$expression, collate: $scope$collate, sort_direction: $scope$sort_direction, nulls_direction: $scope$nulls_direction};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_$0> {
        return this.matchselect_ordering_term_collate($$dpth + 1, $$cr);
    }
    public matchselect_ordering_term_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_$1> {
        return this.matchselect_ordering_term_sort_direction($$dpth + 1, $$cr);
    }
    public matchselect_ordering_term_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_$2> {
        return this.matchselect_ordering_term_nulls_direction($$dpth + 1, $$cr);
    }
    public matchselect_ordering_term_sort_direction($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_sort_direction> {
        return this.choice<select_ordering_term_sort_direction>([
            () => this.matchselect_ordering_term_sort_direction_1($$dpth + 1, $$cr),
            () => this.matchselect_ordering_term_sort_direction_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_ordering_term_sort_direction_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_sort_direction_1> {
        return this.run<select_ordering_term_sort_direction_1>($$dpth,
            () => {
                let $scope$value: Nullable<literal_asc>;
                let $$res: Nullable<select_ordering_term_sort_direction_1> = null;
                if (true
                    && ($scope$value = this.matchliteral_asc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term_sort_direction_1, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term_sort_direction_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_sort_direction_2> {
        return this.run<select_ordering_term_sort_direction_2>($$dpth,
            () => {
                let $scope$value: Nullable<literal_desc>;
                let $$res: Nullable<select_ordering_term_sort_direction_2> = null;
                if (true
                    && ($scope$value = this.matchliteral_desc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term_sort_direction_2, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term_collate($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_collate> {
        return this.run<select_ordering_term_collate>($$dpth,
            () => {
                let $scope$collation_name: Nullable<identifier>;
                let $$res: Nullable<select_ordering_term_collate> = null;
                if (true
                    && this.matchliteral_collate($$dpth + 1, $$cr) !== null
                    && ($scope$collation_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term_collate, collation_name: $scope$collation_name};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term_nulls_direction($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_nulls_direction> {
        return this.choice<select_ordering_term_nulls_direction>([
            () => this.matchselect_ordering_term_nulls_direction_1($$dpth + 1, $$cr),
            () => this.matchselect_ordering_term_nulls_direction_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_ordering_term_nulls_direction_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_nulls_direction_1> {
        return this.run<select_ordering_term_nulls_direction_1>($$dpth,
            () => {
                let $scope$value: Nullable<literal_first>;
                let $$res: Nullable<select_ordering_term_nulls_direction_1> = null;
                if (true
                    && this.matchliteral_nulls($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchliteral_first($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term_nulls_direction_1, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchselect_ordering_term_nulls_direction_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_ordering_term_nulls_direction_2> {
        return this.run<select_ordering_term_nulls_direction_2>($$dpth,
            () => {
                let $scope$value: Nullable<literal_last>;
                let $$res: Nullable<select_ordering_term_nulls_direction_2> = null;
                if (true
                    && this.matchliteral_nulls($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchliteral_last($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_ordering_term_nulls_direction_2, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchselect_limit($$dpth: number, $$cr?: ErrorTracker): Nullable<select_limit> {
        return this.run<select_limit>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $scope$offset: Nullable<Nullable<select_limit_offset>>;
                let $$res: Nullable<select_limit> = null;
                if (true
                    && this.matchliteral_limit($$dpth + 1, $$cr) !== null
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && (($scope$offset = this.matchselect_limit_offset($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_limit, expression: $scope$expression, offset: $scope$offset};
                }
                return $$res;
            });
    }
    public matchselect_limit_offset($$dpth: number, $$cr?: ErrorTracker): Nullable<select_limit_offset> {
        return this.choice<select_limit_offset>([
            () => this.matchselect_limit_offset_1($$dpth + 1, $$cr),
            () => this.matchselect_limit_offset_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselect_limit_offset_1($$dpth: number, $$cr?: ErrorTracker): Nullable<select_limit_offset_1> {
        return this.run<select_limit_offset_1>($$dpth,
            () => {
                let $scope$offset: Nullable<expression>;
                let $$res: Nullable<select_limit_offset_1> = null;
                if (true
                    && this.matchliteral_offset($$dpth + 1, $$cr) !== null
                    && ($scope$offset = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_limit_offset_1, offset: $scope$offset};
                }
                return $$res;
            });
    }
    public matchselect_limit_offset_2($$dpth: number, $$cr?: ErrorTracker): Nullable<select_limit_offset_2> {
        return this.run<select_limit_offset_2>($$dpth,
            () => {
                let $scope$offset: Nullable<expression>;
                let $$res: Nullable<select_limit_offset_2> = null;
                if (true
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$offset = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_limit_offset_2, offset: $scope$offset};
                }
                return $$res;
            });
    }
    public matchselect_group_by($$dpth: number, $$cr?: ErrorTracker): Nullable<select_group_by> {
        return this.run<select_group_by>($$dpth,
            () => {
                let $scope$expression_list: Nullable<expression_list>;
                let $scope$having: Nullable<Nullable<select_group_by_$0>>;
                let $$res: Nullable<select_group_by> = null;
                if (true
                    && this.matchliteral_group($$dpth + 1, $$cr) !== null
                    && this.matchliteral_by($$dpth + 1, $$cr) !== null
                    && ($scope$expression_list = this.matchexpression_list($$dpth + 1, $$cr)) !== null
                    && (($scope$having = this.matchselect_group_by_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.select_group_by, expression_list: $scope$expression_list, having: $scope$having};
                }
                return $$res;
            });
    }
    public matchselect_group_by_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<select_group_by_$0> {
        return this.run<select_group_by_$0>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<select_group_by_$0> = null;
                if (true
                    && this.matchliteral_having($$dpth + 1, $$cr) !== null
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.select_group_by_$0, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchexpression_list($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_list> {
        return this.run<expression_list>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $scope$other_expressions: Nullable<expression_list_$0[]>;
                let $$res: Nullable<expression_list> = null;
                if (true
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && ($scope$other_expressions = this.loop<expression_list_$0>(() => this.matchexpression_list_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_list, expression: $scope$expression, other_expressions: $scope$other_expressions};
                }
                return $$res;
            });
    }
    public matchexpression_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_list_$0> {
        return this.run<expression_list_$0>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<expression_list_$0> = null;
                if (true
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_list_$0, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<expression> {
        return this.matchexpression_front_recursive($$dpth + 1, $$cr);
    }
    public matchexpression_column($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_column> {
        return this.choice<expression_column>([
            () => this.matchexpression_column_1($$dpth + 1, $$cr),
            () => this.matchexpression_column_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_column_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_column_1> {
        return this.run<expression_column_1>($$dpth,
            () => {
                let $scope$schema_name: Nullable<expression_column_$0>;
                let $scope$table_name: Nullable<expression_column_$1>;
                let $scope$column_name: Nullable<identifier>;
                let $$res: Nullable<expression_column_1> = null;
                if (true
                    && ($scope$schema_name = this.matchexpression_column_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$table_name = this.matchexpression_column_$1($$dpth + 1, $$cr)) !== null
                    && ($scope$column_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_column_1, schema_name: $scope$schema_name, table_name: $scope$table_name, column_name: $scope$column_name};
                }
                return $$res;
            });
    }
    public matchexpression_column_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_column_2> {
        return this.run<expression_column_2>($$dpth,
            () => {
                let $scope$table_name: Nullable<Nullable<expression_column_$2>>;
                let $scope$column_name: Nullable<identifier>;
                let $$res: Nullable<expression_column_2> = null;
                if (true
                    && (($scope$table_name = this.matchexpression_column_$2($$dpth + 1, $$cr)) || true)
                    && ($scope$column_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_column_2, table_name: $scope$table_name, column_name: $scope$column_name};
                }
                return $$res;
            });
    }
    public matchexpression_column_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_column_$0> {
        return this.run<expression_column_$0>($$dpth,
            () => {
                let $scope$schema_name: Nullable<identifier>;
                let $$res: Nullable<expression_column_$0> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$schema_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_period($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_column_$0, schema_name: $scope$schema_name};
                }
                return $$res;
            });
    }
    public matchexpression_column_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_column_$1> {
        return this.run<expression_column_$1>($$dpth,
            () => {
                let $scope$table_name: Nullable<identifier>;
                let $$res: Nullable<expression_column_$1> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$table_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_period($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_column_$1, table_name: $scope$table_name};
                }
                return $$res;
            });
    }
    public matchexpression_column_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_column_$2> {
        return this.run<expression_column_$2>($$dpth,
            () => {
                let $scope$table_name: Nullable<identifier>;
                let $$res: Nullable<expression_column_$2> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$table_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_period($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_column_$2, table_name: $scope$table_name};
                }
                return $$res;
            });
    }
    public matchexpression_unary($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_unary> {
        return this.run<expression_unary>($$dpth,
            () => {
                let $scope$unary_operator: Nullable<unary_operator>;
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<expression_unary> = null;
                if (true
                    && ($scope$unary_operator = this.matchunary_operator($$dpth + 1, $$cr)) !== null
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_unary, unary_operator: $scope$unary_operator, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchexpression_non_front_recursive($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_non_front_recursive> {
        return this.choice<expression_non_front_recursive>([
            () => this.matchexpression_non_front_recursive_1($$dpth + 1, $$cr),
            () => this.matchexpression_non_front_recursive_2($$dpth + 1, $$cr),
            () => this.matchexpression_non_front_recursive_3($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_non_front_recursive_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_non_front_recursive_1> {
        return this.matchexpression_column($$dpth + 1, $$cr);
    }
    public matchexpression_non_front_recursive_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_non_front_recursive_2> {
        return this.matchexpression_unary($$dpth + 1, $$cr);
    }
    public matchexpression_non_front_recursive_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_non_front_recursive_3> {
        return this.matchvalue_literal($$dpth + 1, $$cr);
    }
    public matchexpression_function_invocation($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_function_invocation> {
        return this.run<expression_function_invocation>($$dpth,
            () => {
                let $scope$function_name: Nullable<identifier>;
                let $scope$expression_list: Nullable<Nullable<expression_list>>;
                let $$res: Nullable<expression_function_invocation> = null;
                if (true
                    && ($scope$function_name = this.matchidentifier($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && (($scope$expression_list = this.matchexpression_list($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_function_invocation, function_name: $scope$function_name, expression_list: $scope$expression_list};
                }
                return $$res;
            });
    }
    public matchexpression_select_or_expression_list($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list> {
        return this.run<expression_select_or_expression_list>($$dpth,
            () => {
                let $scope$expression_or_select: Nullable<expression_select_or_expression_list_$0>;
                let $scope$other_expression_or_selects: Nullable<expression_select_or_expression_list_$1[]>;
                let $$res: Nullable<expression_select_or_expression_list> = null;
                if (true
                    && ($scope$expression_or_select = this.matchexpression_select_or_expression_list_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$other_expression_or_selects = this.loop<expression_select_or_expression_list_$1>(() => this.matchexpression_select_or_expression_list_$1($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_select_or_expression_list, expression_or_select: $scope$expression_or_select, other_expression_or_selects: $scope$other_expression_or_selects};
                }
                return $$res;
            });
    }
    public matchexpression_select_or_expression_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list_$0> {
        return this.choice<expression_select_or_expression_list_$0>([
            () => this.matchexpression_select_or_expression_list_$0_1($$dpth + 1, $$cr),
            () => this.matchexpression_select_or_expression_list_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_select_or_expression_list_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list_$0_1> {
        return this.run<expression_select_or_expression_list_$0_1>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<expression_select_or_expression_list_$0_1> = null;
                if (true
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_select_or_expression_list_$0_1, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchexpression_select_or_expression_list_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list_$0_2> {
        return this.run<expression_select_or_expression_list_$0_2>($$dpth,
            () => {
                let $scope$stmt_select: Nullable<stmt_select>;
                let $$res: Nullable<expression_select_or_expression_list_$0_2> = null;
                if (true
                    && ($scope$stmt_select = this.matchstmt_select($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_select_or_expression_list_$0_2, stmt_select: $scope$stmt_select};
                }
                return $$res;
            });
    }
    public matchexpression_select_or_expression_list_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list_$1> {
        return this.run<expression_select_or_expression_list_$1>($$dpth,
            () => {
                let $scope$expression_or_select: Nullable<expression_select_or_expression_list_$1_$0>;
                let $$res: Nullable<expression_select_or_expression_list_$1> = null;
                if (true
                    && this.matchliteral_comma($$dpth + 1, $$cr) !== null
                    && ($scope$expression_or_select = this.matchexpression_select_or_expression_list_$1_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_select_or_expression_list_$1, expression_or_select: $scope$expression_or_select};
                }
                return $$res;
            });
    }
    public matchexpression_select_or_expression_list_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list_$1_$0> {
        return this.choice<expression_select_or_expression_list_$1_$0>([
            () => this.matchexpression_select_or_expression_list_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchexpression_select_or_expression_list_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_select_or_expression_list_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list_$1_$0_1> {
        return this.run<expression_select_or_expression_list_$1_$0_1>($$dpth,
            () => {
                let $scope$expression: Nullable<expression>;
                let $$res: Nullable<expression_select_or_expression_list_$1_$0_1> = null;
                if (true
                    && ($scope$expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_select_or_expression_list_$1_$0_1, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchexpression_select_or_expression_list_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_select_or_expression_list_$1_$0_2> {
        return this.run<expression_select_or_expression_list_$1_$0_2>($$dpth,
            () => {
                let $scope$stmt_select: Nullable<stmt_select>;
                let $$res: Nullable<expression_select_or_expression_list_$1_$0_2> = null;
                if (true
                    && ($scope$stmt_select = this.matchstmt_select($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_select_or_expression_list_$1_$0_2, stmt_select: $scope$stmt_select};
                }
                return $$res;
            });
    }
    public matchexpression_in($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_in> {
        return this.run<expression_in>($$dpth,
            () => {
                let $scope$expression: Nullable<expression_non_front_recursive>;
                let $scope$invert: Nullable<Nullable<literal_not>>;
                let $scope$values: Nullable<expression_select_or_expression_list>;
                let $$res: Nullable<expression_in> = null;
                if (true
                    && ($scope$expression = this.matchexpression_non_front_recursive($$dpth + 1, $$cr)) !== null
                    && (($scope$invert = this.matchliteral_not($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_in($$dpth + 1, $$cr) !== null
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$values = this.matchexpression_select_or_expression_list($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_in, expression: $scope$expression, invert: $scope$invert, values: $scope$values};
                }
                return $$res;
            });
    }
    public matchexpression_exists_assertion($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_exists_assertion> {
        return this.run<expression_exists_assertion>($$dpth,
            () => {
                let $scope$invert: Nullable<Nullable<literal_not>>;
                let $scope$stmt_select: Nullable<stmt_select>;
                let $$res: Nullable<expression_exists_assertion> = null;
                if (true
                    && (($scope$invert = this.matchliteral_not($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_exists($$dpth + 1, $$cr) !== null
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$stmt_select = this.matchstmt_select($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_exists_assertion, invert: $scope$invert, stmt_select: $scope$stmt_select};
                }
                return $$res;
            });
    }
    public matchexpression_null_assertion($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_null_assertion> {
        return this.choice<expression_null_assertion>([
            () => this.matchexpression_null_assertion_1($$dpth + 1, $$cr),
            () => this.matchexpression_null_assertion_2($$dpth + 1, $$cr),
            () => this.matchexpression_null_assertion_3($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_null_assertion_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_null_assertion_1> {
        return this.run<expression_null_assertion_1>($$dpth,
            () => {
                let $scope$expression: Nullable<expression_non_front_recursive>;
                let $scope$not_null: Nullable<expression_null_assertion_$0>;
                let $$res: Nullable<expression_null_assertion_1> = null;
                if (true
                    && ($scope$expression = this.matchexpression_non_front_recursive($$dpth + 1, $$cr)) !== null
                    && ($scope$not_null = this.matchexpression_null_assertion_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_null_assertion_1, expression: $scope$expression, not_null: $scope$not_null};
                }
                return $$res;
            });
    }
    public matchexpression_null_assertion_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_null_assertion_2> {
        return this.run<expression_null_assertion_2>($$dpth,
            () => {
                let $scope$expression: Nullable<expression_non_front_recursive>;
                let $scope$not_null: Nullable<literal_not_null>;
                let $$res: Nullable<expression_null_assertion_2> = null;
                if (true
                    && ($scope$expression = this.matchexpression_non_front_recursive($$dpth + 1, $$cr)) !== null
                    && ($scope$not_null = this.matchliteral_not_null($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_null_assertion_2, expression: $scope$expression, not_null: $scope$not_null};
                }
                return $$res;
            });
    }
    public matchexpression_null_assertion_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_null_assertion_3> {
        return this.run<expression_null_assertion_3>($$dpth,
            () => {
                let $scope$expression: Nullable<expression_non_front_recursive>;
                let $scope$is_null: Nullable<literal_is_null>;
                let $$res: Nullable<expression_null_assertion_3> = null;
                if (true
                    && ($scope$expression = this.matchexpression_non_front_recursive($$dpth + 1, $$cr)) !== null
                    && ($scope$is_null = this.matchliteral_is_null($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_null_assertion_3, expression: $scope$expression, is_null: $scope$is_null};
                }
                return $$res;
            });
    }
    public matchexpression_null_assertion_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_null_assertion_$0> {
        return this.run<expression_null_assertion_$0>($$dpth,
            () => {
                let $$res: Nullable<expression_null_assertion_$0> = null;
                if (true
                    && this.matchliteral_not($$dpth + 1, $$cr) !== null
                    && this.matchliteral_null($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_null_assertion_$0, };
                }
                return $$res;
            });
    }
    public matchexpression_between($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_between> {
        return this.run<expression_between>($$dpth,
            () => {
                let $scope$expression: Nullable<expression_non_front_recursive>;
                let $scope$invert: Nullable<Nullable<literal_not>>;
                let $scope$left_expression: Nullable<expression_non_front_recursive>;
                let $scope$right_expression: Nullable<expression>;
                let $$res: Nullable<expression_between> = null;
                if (true
                    && ($scope$expression = this.matchexpression_non_front_recursive($$dpth + 1, $$cr)) !== null
                    && (($scope$invert = this.matchliteral_not($$dpth + 1, $$cr)) || true)
                    && this.matchliteral_between($$dpth + 1, $$cr) !== null
                    && ($scope$left_expression = this.matchexpression_non_front_recursive($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_and($$dpth + 1, $$cr) !== null
                    && ($scope$right_expression = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_between, expression: $scope$expression, invert: $scope$invert, left_expression: $scope$left_expression, right_expression: $scope$right_expression};
                }
                return $$res;
            });
    }
    public matchexpression_binary($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_binary> {
        return this.run<expression_binary>($$dpth,
            () => {
                let $scope$expression_a: Nullable<expression_non_front_recursive>;
                let $scope$operator: Nullable<binary_operator>;
                let $scope$expression_b: Nullable<expression>;
                let $$res: Nullable<expression_binary> = null;
                if (true
                    && ($scope$expression_a = this.matchexpression_non_front_recursive($$dpth + 1, $$cr)) !== null
                    && ($scope$operator = this.matchbinary_operator($$dpth + 1, $$cr)) !== null
                    && ($scope$expression_b = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_binary, expression_a: $scope$expression_a, operator: $scope$operator, expression_b: $scope$expression_b};
                }
                return $$res;
            });
    }
    public matchexpression_parens($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_parens> {
        return this.run<expression_parens>($$dpth,
            () => {
                let $scope$expression: Nullable<expression_front_recursive>;
                let $$res: Nullable<expression_parens> = null;
                if (true
                    && this.matchliteral_open_paren($$dpth + 1, $$cr) !== null
                    && ($scope$expression = this.matchexpression_front_recursive($$dpth + 1, $$cr)) !== null
                    && this.matchliteral_close_paren($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_parens, expression: $scope$expression};
                }
                return $$res;
            });
    }
    public matchexpression_front_recursive($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive> {
        return this.choice<expression_front_recursive>([
            () => this.matchexpression_front_recursive_1($$dpth + 1, $$cr),
            () => this.matchexpression_front_recursive_2($$dpth + 1, $$cr),
            () => this.matchexpression_front_recursive_3($$dpth + 1, $$cr),
            () => this.matchexpression_front_recursive_4($$dpth + 1, $$cr),
            () => this.matchexpression_front_recursive_5($$dpth + 1, $$cr),
            () => this.matchexpression_front_recursive_6($$dpth + 1, $$cr),
            () => this.matchexpression_front_recursive_7($$dpth + 1, $$cr),
            () => this.matchexpression_front_recursive_8($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_front_recursive_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_1> {
        return this.matchexpression_in($$dpth + 1, $$cr);
    }
    public matchexpression_front_recursive_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_2> {
        return this.matchexpression_exists_assertion($$dpth + 1, $$cr);
    }
    public matchexpression_front_recursive_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_3> {
        return this.matchexpression_parens($$dpth + 1, $$cr);
    }
    public matchexpression_front_recursive_4($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_4> {
        return this.matchexpression_null_assertion($$dpth + 1, $$cr);
    }
    public matchexpression_front_recursive_5($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_5> {
        return this.matchexpression_between($$dpth + 1, $$cr);
    }
    public matchexpression_front_recursive_6($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_6> {
        return this.matchexpression_binary($$dpth + 1, $$cr);
    }
    public matchexpression_front_recursive_7($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_7> {
        return this.matchexpression_function_invocation($$dpth + 1, $$cr);
    }
    public matchexpression_front_recursive_8($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_front_recursive_8> {
        return this.matchexpression_non_front_recursive($$dpth + 1, $$cr);
    }
    public matchselect_with($$dpth: number, $$cr?: ErrorTracker): Nullable<select_with> {
        return this.matchliteral_with($$dpth + 1, $$cr);
    }
    public matchidentifier($$dpth: number, $$cr?: ErrorTracker): Nullable<identifier> {
        return this.run<identifier>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<identifier> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && this.negate(() => this.matchall_literals($$dpth + 1, $$cr)) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z0-9_]*)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.identifier, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {
        return this.run<num>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<num> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.num, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchquoted_string($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_string> {
        return this.run<quoted_string>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<quoted_string> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:"(?:[^"\\]|\\.)*")`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.quoted_string, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchunary_operator($$dpth: number, $$cr?: ErrorTracker): Nullable<unary_operator> {
        return this.matchliteral_not($$dpth + 1, $$cr);
    }
    public matchbinary_operator($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator> {
        return this.choice<binary_operator>([
            () => this.matchbinary_operator_1($$dpth + 1, $$cr),
            () => this.matchbinary_operator_2($$dpth + 1, $$cr),
            () => this.matchbinary_operator_3($$dpth + 1, $$cr),
            () => this.matchbinary_operator_4($$dpth + 1, $$cr),
            () => this.matchbinary_operator_5($$dpth + 1, $$cr),
            () => this.matchbinary_operator_6($$dpth + 1, $$cr),
            () => this.matchbinary_operator_7($$dpth + 1, $$cr),
            () => this.matchbinary_operator_8($$dpth + 1, $$cr),
            () => this.matchbinary_operator_9($$dpth + 1, $$cr),
            () => this.matchbinary_operator_10($$dpth + 1, $$cr),
            () => this.matchbinary_operator_11($$dpth + 1, $$cr),
            () => this.matchbinary_operator_12($$dpth + 1, $$cr),
        ]);
    }
    public matchbinary_operator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_1> {
        return this.matchliteral_and($$dpth + 1, $$cr);
    }
    public matchbinary_operator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_2> {
        return this.matchliteral_or($$dpth + 1, $$cr);
    }
    public matchbinary_operator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_3> {
        return this.matchliteral_plus($$dpth + 1, $$cr);
    }
    public matchbinary_operator_4($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_4> {
        return this.matchliteral_minus($$dpth + 1, $$cr);
    }
    public matchbinary_operator_5($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_5> {
        return this.matchliteral_asterisk($$dpth + 1, $$cr);
    }
    public matchbinary_operator_6($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_6> {
        return this.matchliteral_slash($$dpth + 1, $$cr);
    }
    public matchbinary_operator_7($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_7> {
        return this.matchliteral_gte($$dpth + 1, $$cr);
    }
    public matchbinary_operator_8($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_8> {
        return this.matchliteral_lte($$dpth + 1, $$cr);
    }
    public matchbinary_operator_9($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_9> {
        return this.matchliteral_gt($$dpth + 1, $$cr);
    }
    public matchbinary_operator_10($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_10> {
        return this.matchliteral_lt($$dpth + 1, $$cr);
    }
    public matchbinary_operator_11($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_11> {
        return this.matchliteral_equal($$dpth + 1, $$cr);
    }
    public matchbinary_operator_12($$dpth: number, $$cr?: ErrorTracker): Nullable<binary_operator_12> {
        return this.matchliteral_not_equal($$dpth + 1, $$cr);
    }
    public matchvalue_literal($$dpth: number, $$cr?: ErrorTracker): Nullable<value_literal> {
        return this.choice<value_literal>([
            () => this.matchvalue_literal_1($$dpth + 1, $$cr),
            () => this.matchvalue_literal_2($$dpth + 1, $$cr),
            () => this.matchvalue_literal_3($$dpth + 1, $$cr),
            () => this.matchvalue_literal_4($$dpth + 1, $$cr),
            () => this.matchvalue_literal_5($$dpth + 1, $$cr),
            () => this.matchvalue_literal_6($$dpth + 1, $$cr),
        ]);
    }
    public matchvalue_literal_1($$dpth: number, $$cr?: ErrorTracker): Nullable<value_literal_1> {
        return this.matchidentifier($$dpth + 1, $$cr);
    }
    public matchvalue_literal_2($$dpth: number, $$cr?: ErrorTracker): Nullable<value_literal_2> {
        return this.matchnum($$dpth + 1, $$cr);
    }
    public matchvalue_literal_3($$dpth: number, $$cr?: ErrorTracker): Nullable<value_literal_3> {
        return this.matchliteral_true($$dpth + 1, $$cr);
    }
    public matchvalue_literal_4($$dpth: number, $$cr?: ErrorTracker): Nullable<value_literal_4> {
        return this.matchliteral_false($$dpth + 1, $$cr);
    }
    public matchvalue_literal_5($$dpth: number, $$cr?: ErrorTracker): Nullable<value_literal_5> {
        return this.matchliteral_null($$dpth + 1, $$cr);
    }
    public matchvalue_literal_6($$dpth: number, $$cr?: ErrorTracker): Nullable<value_literal_6> {
        return this.matchquoted_string($$dpth + 1, $$cr);
    }
    public matchall_literals($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals> {
        return this.choice<all_literals>([
            () => this.matchall_literals_1($$dpth + 1, $$cr),
            () => this.matchall_literals_2($$dpth + 1, $$cr),
            () => this.matchall_literals_3($$dpth + 1, $$cr),
            () => this.matchall_literals_4($$dpth + 1, $$cr),
            () => this.matchall_literals_5($$dpth + 1, $$cr),
            () => this.matchall_literals_6($$dpth + 1, $$cr),
            () => this.matchall_literals_7($$dpth + 1, $$cr),
            () => this.matchall_literals_8($$dpth + 1, $$cr),
            () => this.matchall_literals_9($$dpth + 1, $$cr),
            () => this.matchall_literals_10($$dpth + 1, $$cr),
            () => this.matchall_literals_11($$dpth + 1, $$cr),
            () => this.matchall_literals_12($$dpth + 1, $$cr),
            () => this.matchall_literals_13($$dpth + 1, $$cr),
            () => this.matchall_literals_14($$dpth + 1, $$cr),
            () => this.matchall_literals_15($$dpth + 1, $$cr),
            () => this.matchall_literals_16($$dpth + 1, $$cr),
            () => this.matchall_literals_17($$dpth + 1, $$cr),
            () => this.matchall_literals_18($$dpth + 1, $$cr),
            () => this.matchall_literals_19($$dpth + 1, $$cr),
            () => this.matchall_literals_20($$dpth + 1, $$cr),
            () => this.matchall_literals_21($$dpth + 1, $$cr),
            () => this.matchall_literals_22($$dpth + 1, $$cr),
            () => this.matchall_literals_23($$dpth + 1, $$cr),
            () => this.matchall_literals_24($$dpth + 1, $$cr),
            () => this.matchall_literals_25($$dpth + 1, $$cr),
            () => this.matchall_literals_26($$dpth + 1, $$cr),
            () => this.matchall_literals_27($$dpth + 1, $$cr),
            () => this.matchall_literals_28($$dpth + 1, $$cr),
            () => this.matchall_literals_29($$dpth + 1, $$cr),
            () => this.matchall_literals_30($$dpth + 1, $$cr),
            () => this.matchall_literals_31($$dpth + 1, $$cr),
            () => this.matchall_literals_32($$dpth + 1, $$cr),
            () => this.matchall_literals_33($$dpth + 1, $$cr),
            () => this.matchall_literals_34($$dpth + 1, $$cr),
            () => this.matchall_literals_35($$dpth + 1, $$cr),
            () => this.matchall_literals_36($$dpth + 1, $$cr),
            () => this.matchall_literals_37($$dpth + 1, $$cr),
            () => this.matchall_literals_38($$dpth + 1, $$cr),
            () => this.matchall_literals_39($$dpth + 1, $$cr),
            () => this.matchall_literals_40($$dpth + 1, $$cr),
            () => this.matchall_literals_41($$dpth + 1, $$cr),
            () => this.matchall_literals_42($$dpth + 1, $$cr),
            () => this.matchall_literals_43($$dpth + 1, $$cr),
            () => this.matchall_literals_44($$dpth + 1, $$cr),
            () => this.matchall_literals_45($$dpth + 1, $$cr),
            () => this.matchall_literals_46($$dpth + 1, $$cr),
            () => this.matchall_literals_47($$dpth + 1, $$cr),
            () => this.matchall_literals_48($$dpth + 1, $$cr),
            () => this.matchall_literals_49($$dpth + 1, $$cr),
            () => this.matchall_literals_50($$dpth + 1, $$cr),
            () => this.matchall_literals_51($$dpth + 1, $$cr),
            () => this.matchall_literals_52($$dpth + 1, $$cr),
            () => this.matchall_literals_53($$dpth + 1, $$cr),
            () => this.matchall_literals_54($$dpth + 1, $$cr),
            () => this.matchall_literals_55($$dpth + 1, $$cr),
            () => this.matchall_literals_56($$dpth + 1, $$cr),
        ]);
    }
    public matchall_literals_1($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_1> {
        return this.matchliteral_and($$dpth + 1, $$cr);
    }
    public matchall_literals_2($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_2> {
        return this.matchliteral_or($$dpth + 1, $$cr);
    }
    public matchall_literals_3($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_3> {
        return this.matchliteral_plus($$dpth + 1, $$cr);
    }
    public matchall_literals_4($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_4> {
        return this.matchliteral_minus($$dpth + 1, $$cr);
    }
    public matchall_literals_5($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_5> {
        return this.matchliteral_slash($$dpth + 1, $$cr);
    }
    public matchall_literals_6($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_6> {
        return this.matchliteral_gte($$dpth + 1, $$cr);
    }
    public matchall_literals_7($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_7> {
        return this.matchliteral_lte($$dpth + 1, $$cr);
    }
    public matchall_literals_8($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_8> {
        return this.matchliteral_lt($$dpth + 1, $$cr);
    }
    public matchall_literals_9($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_9> {
        return this.matchliteral_gt($$dpth + 1, $$cr);
    }
    public matchall_literals_10($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_10> {
        return this.matchliteral_equal($$dpth + 1, $$cr);
    }
    public matchall_literals_11($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_11> {
        return this.matchliteral_not_equal($$dpth + 1, $$cr);
    }
    public matchall_literals_12($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_12> {
        return this.matchliteral_not($$dpth + 1, $$cr);
    }
    public matchall_literals_13($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_13> {
        return this.matchliteral_true($$dpth + 1, $$cr);
    }
    public matchall_literals_14($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_14> {
        return this.matchliteral_false($$dpth + 1, $$cr);
    }
    public matchall_literals_15($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_15> {
        return this.matchliteral_null($$dpth + 1, $$cr);
    }
    public matchall_literals_16($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_16> {
        return this.matchliteral_comma($$dpth + 1, $$cr);
    }
    public matchall_literals_17($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_17> {
        return this.matchliteral_asterisk($$dpth + 1, $$cr);
    }
    public matchall_literals_18($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_18> {
        return this.matchliteral_period($$dpth + 1, $$cr);
    }
    public matchall_literals_19($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_19> {
        return this.matchliteral_semi_colon($$dpth + 1, $$cr);
    }
    public matchall_literals_20($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_20> {
        return this.matchliteral_open_paren($$dpth + 1, $$cr);
    }
    public matchall_literals_21($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_21> {
        return this.matchliteral_close_paren($$dpth + 1, $$cr);
    }
    public matchall_literals_22($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_22> {
        return this.matchliteral_on($$dpth + 1, $$cr);
    }
    public matchall_literals_23($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_23> {
        return this.matchliteral_using($$dpth + 1, $$cr);
    }
    public matchall_literals_24($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_24> {
        return this.matchliteral_natural($$dpth + 1, $$cr);
    }
    public matchall_literals_25($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_25> {
        return this.matchliteral_outer($$dpth + 1, $$cr);
    }
    public matchall_literals_26($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_26> {
        return this.matchliteral_left($$dpth + 1, $$cr);
    }
    public matchall_literals_27($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_27> {
        return this.matchliteral_right($$dpth + 1, $$cr);
    }
    public matchall_literals_28($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_28> {
        return this.matchliteral_inner($$dpth + 1, $$cr);
    }
    public matchall_literals_29($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_29> {
        return this.matchliteral_full($$dpth + 1, $$cr);
    }
    public matchall_literals_30($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_30> {
        return this.matchliteral_cross($$dpth + 1, $$cr);
    }
    public matchall_literals_31($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_31> {
        return this.matchliteral_join($$dpth + 1, $$cr);
    }
    public matchall_literals_32($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_32> {
        return this.matchliteral_from($$dpth + 1, $$cr);
    }
    public matchall_literals_33($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_33> {
        return this.matchliteral_with($$dpth + 1, $$cr);
    }
    public matchall_literals_34($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_34> {
        return this.matchliteral_select($$dpth + 1, $$cr);
    }
    public matchall_literals_35($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_35> {
        return this.matchliteral_where($$dpth + 1, $$cr);
    }
    public matchall_literals_36($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_36> {
        return this.matchliteral_all($$dpth + 1, $$cr);
    }
    public matchall_literals_37($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_37> {
        return this.matchliteral_distinct($$dpth + 1, $$cr);
    }
    public matchall_literals_38($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_38> {
        return this.matchliteral_as($$dpth + 1, $$cr);
    }
    public matchall_literals_39($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_39> {
        return this.matchliteral_order($$dpth + 1, $$cr);
    }
    public matchall_literals_40($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_40> {
        return this.matchliteral_by($$dpth + 1, $$cr);
    }
    public matchall_literals_41($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_41> {
        return this.matchliteral_collate($$dpth + 1, $$cr);
    }
    public matchall_literals_42($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_42> {
        return this.matchliteral_asc($$dpth + 1, $$cr);
    }
    public matchall_literals_43($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_43> {
        return this.matchliteral_desc($$dpth + 1, $$cr);
    }
    public matchall_literals_44($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_44> {
        return this.matchliteral_nulls($$dpth + 1, $$cr);
    }
    public matchall_literals_45($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_45> {
        return this.matchliteral_first($$dpth + 1, $$cr);
    }
    public matchall_literals_46($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_46> {
        return this.matchliteral_last($$dpth + 1, $$cr);
    }
    public matchall_literals_47($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_47> {
        return this.matchliteral_limit($$dpth + 1, $$cr);
    }
    public matchall_literals_48($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_48> {
        return this.matchliteral_offset($$dpth + 1, $$cr);
    }
    public matchall_literals_49($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_49> {
        return this.matchliteral_not_null($$dpth + 1, $$cr);
    }
    public matchall_literals_50($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_50> {
        return this.matchliteral_is_null($$dpth + 1, $$cr);
    }
    public matchall_literals_51($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_51> {
        return this.matchliteral_is($$dpth + 1, $$cr);
    }
    public matchall_literals_52($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_52> {
        return this.matchliteral_between($$dpth + 1, $$cr);
    }
    public matchall_literals_53($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_53> {
        return this.matchliteral_exists($$dpth + 1, $$cr);
    }
    public matchall_literals_54($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_54> {
        return this.matchliteral_in($$dpth + 1, $$cr);
    }
    public matchall_literals_55($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_55> {
        return this.matchliteral_group($$dpth + 1, $$cr);
    }
    public matchall_literals_56($$dpth: number, $$cr?: ErrorTracker): Nullable<all_literals_56> {
        return this.matchliteral_having($$dpth + 1, $$cr);
    }
    public matchliteral_order($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_order> {
        return this.run<literal_order>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_order> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:order)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_order, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_by($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_by> {
        return this.run<literal_by>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_by> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:by)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_by, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_collate($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_collate> {
        return this.run<literal_collate>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_collate> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:collate)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_collate, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_asc($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_asc> {
        return this.run<literal_asc>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_asc> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:asc)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_asc, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_desc($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_desc> {
        return this.run<literal_desc>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_desc> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:desc)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_desc, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_nulls($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_nulls> {
        return this.run<literal_nulls>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_nulls> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:nulls)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_nulls, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_first($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_first> {
        return this.run<literal_first>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_first> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:first)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_first, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_last($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_last> {
        return this.run<literal_last>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_last> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:last)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_last, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_limit($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_limit> {
        return this.run<literal_limit>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_limit> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:limit)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_limit, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_offset($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_offset> {
        return this.run<literal_offset>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_offset> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:offset)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_offset, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_group($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_group> {
        return this.run<literal_group>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_group> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:group)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_group, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_having($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_having> {
        return this.run<literal_having>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_having> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:having)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_having, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_and($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_and> {
        return this.run<literal_and>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_and> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:and)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_and, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_or($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_or> {
        return this.run<literal_or>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_or> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:or)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_or, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_plus($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_plus> {
        return this.run<literal_plus>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_plus> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_plus, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_minus($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_minus> {
        return this.run<literal_minus>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_minus> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_minus, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_slash($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_slash> {
        return this.run<literal_slash>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_slash> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:/)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_slash, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_gte($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_gte> {
        return this.run<literal_gte>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_gte> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:>=)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_gte, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_lte($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_lte> {
        return this.run<literal_lte>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_lte> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:<=)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_lte, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_gt($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_gt> {
        return this.run<literal_gt>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_gt> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_gt, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_lt($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_lt> {
        return this.run<literal_lt>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_lt> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_lt, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_equal($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_equal> {
        return this.run<literal_equal>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_equal> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_equal, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_not_equal($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_not_equal> {
        return this.choice<literal_not_equal>([
            () => this.matchliteral_not_equal_1($$dpth + 1, $$cr),
            () => this.matchliteral_not_equal_2($$dpth + 1, $$cr),
        ]);
    }
    public matchliteral_not_equal_1($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_not_equal_1> {
        return this.run<literal_not_equal_1>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_not_equal_1> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:!=)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_not_equal_1, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_not_equal_2($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_not_equal_2> {
        return this.run<literal_not_equal_2>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_not_equal_2> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:<>)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_not_equal_2, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_not($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_not> {
        return this.run<literal_not>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_not> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:not)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_not, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_true($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_true> {
        return this.run<literal_true>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_true> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:true)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_true, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_false($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_false> {
        return this.run<literal_false>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_false> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:false)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_false, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_null($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_null> {
        return this.run<literal_null>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_null> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:null)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_null, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_not_null($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_not_null> {
        return this.run<literal_not_null>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_not_null> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:notnull)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_not_null, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_is_null($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_is_null> {
        return this.run<literal_is_null>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_is_null> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:isnull)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_is_null, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_is($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_is> {
        return this.run<literal_is>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_is> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:is)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_is, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_between($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_between> {
        return this.run<literal_between>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_between> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:between)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_between, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_exists($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_exists> {
        return this.run<literal_exists>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_exists> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:exists)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_exists, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_in($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_in> {
        return this.run<literal_in>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_in> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:in)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_in, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_comma($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_comma> {
        return this.run<literal_comma>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_comma> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_comma, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_period($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_period> {
        return this.run<literal_period>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_period> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_period, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_asterisk($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_asterisk> {
        return this.run<literal_asterisk>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_asterisk> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_asterisk, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_semi_colon($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_semi_colon> {
        return this.run<literal_semi_colon>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_semi_colon> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_semi_colon, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_open_paren($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_open_paren> {
        return this.run<literal_open_paren>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_open_paren> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_open_paren, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_close_paren($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_close_paren> {
        return this.run<literal_close_paren>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_close_paren> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_close_paren, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_on($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_on> {
        return this.run<literal_on>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_on> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:on)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_on, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_using($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_using> {
        return this.run<literal_using>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_using> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:using)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_using, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_natural($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_natural> {
        return this.run<literal_natural>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_natural> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:natural)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_natural, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_outer($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_outer> {
        return this.run<literal_outer>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_outer> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:outer)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_outer, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_left($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_left> {
        return this.run<literal_left>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_left> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:left)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_left, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_right($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_right> {
        return this.run<literal_right>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_right> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:right)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_right, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_inner($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_inner> {
        return this.run<literal_inner>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_inner> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:inner)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_inner, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_full($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_full> {
        return this.run<literal_full>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_full> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:full)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_full, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_cross($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_cross> {
        return this.run<literal_cross>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_cross> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:cross)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_cross, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_join($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_join> {
        return this.run<literal_join>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_join> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:join)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_join, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_from($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_from> {
        return this.run<literal_from>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_from> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:from)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_from, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_with($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_with> {
        return this.run<literal_with>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_with> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:with)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_with, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_select($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_select> {
        return this.run<literal_select>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_select> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:select)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_select, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_where($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_where> {
        return this.run<literal_where>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_where> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:where)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_where, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_all($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_all> {
        return this.run<literal_all>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_all> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:all)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_all, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_distinct($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_distinct> {
        return this.run<literal_distinct>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_distinct> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:distinct)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_distinct, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchliteral_as($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_as> {
        return this.run<literal_as>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<literal_as> = null;
                if (true
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:as)`, $$dpth + 1, $$cr)) !== null
                    && this.loop<whitespace>(() => this.matchwhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.literal_as, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchwhitespace($$dpth: number, $$cr?: ErrorTracker): Nullable<whitespace> {
        return this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "yi");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}