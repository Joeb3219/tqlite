start := stmt_list=stmt_list whitespace? $
stmt_list := stmt=stmt other_stmts={ whitespace? literal_semi_colon stmt=stmt }*
stmt := stmt_select
stmt_select := select_with=select_with? select_core=select_core

select_core := literal_select qualifier=select_qualifier? columns=select_result_column_list from=select_from? where=select_where? order_by=select_order? limit=select_limit?
select_qualifier := literal_all | literal_distinct

select_result_column_list := select_result_column=select_result_column other_result_columns={ whitespace? literal_comma select_result_column=select_result_column }*
select_result_column := select_result_column_whole_table | literal_asterisk | select_result_column_expression
select_result_column_expression := expression=expression literal_as? column_alias=identifier?
select_result_column_whole_table := table_name=identifier literal_period literal_asterisk

select_from :=  literal_from join=select_from_join | literal_from table_or_subquery=select_from_table_or_subquery_list
select_from_table_or_subquery_list := table_or_subquery=select_from_table_or_subquery other_table_or_subqueries={ whitespace? literal_comma table_or_subquery=select_from_table_or_subquery }*
select_from_table_or_subquery := literal_open_paren table_or_subquery=select_from literal_close_paren 
                                    | literal_open_paren select_stmt=stmt_select literal_close_paren literal_as? alias=identifier?
                                    | schema_name={whitespace* schema_name=identifier literal_period}? whitespace? table_name=identifier whitespace? alias=identifier? whitespace*
select_from_join := table_a=select_from_table_or_subquery joins={ select_from_join_operator=select_from_join_operator select_from_table_or_subquery=select_from_table_or_subquery select_from_join_constraint=select_from_join_constraint?  }+

column_name_list            :=      column=identifier other_columns={ literal_comma column=identifier }?
select_from_join_constraint :=            literal_on expression=expression
                                    |   literal_using literal_open_paren columns=column_name_list literal_close_paren

select_from_join_operator :=          type=literal_natural? literal_join 
                                    |   natural=literal_natural? type=literal_left outer=literal_outer? literal_join
                                    |   natural=literal_natural? type=literal_right outer=literal_outer? literal_join
                                    |   natural=literal_natural? type=literal_full outer=literal_outer? literal_join
                                    |   natural=literal_natural? type=literal_inner literal_join
                                    |   type=literal_cross literal_join

select_where := literal_where expression=expression

select_order := literal_order literal_by select_ordering_term_list=select_ordering_term_list
select_ordering_term_list := term=select_ordering_term other_terms={ literal_comma term=select_ordering_term }*
select_ordering_term := expression=expression collate={select_ordering_term_collate}? sort_direction={select_ordering_term_sort_direction}? nulls_direction={select_ordering_term_nulls_direction}?
select_ordering_term_sort_direction := value=literal_asc | value=literal_desc
select_ordering_term_collate := literal_collate collation_name=identifier
select_ordering_term_nulls_direction := literal_nulls value=literal_first | literal_nulls value=literal_last

select_limit := literal_limit expression=expression offset=select_limit_offset?
select_limit_offset := literal_offset offset=expression | literal_comma offset=expression

expression_list := expression=expression other_expressions={ literal_comma expression=expression }*
expression := expression_front_recursive
expression_column := schema_name={whitespace* schema_name=identifier literal_period} table_name={whitespace* table_name=identifier literal_period} column_name=identifier | table_name={whitespace* table_name=identifier literal_period}? column_name=identifier 
expression_unary := unary_operator=unary_operator expression=expression
expression_non_front_recursive := expression_column | expression_unary | value_literal

expression_function_invocation := function_name=identifier literal_open_paren expression_list=expression_list? literal_close_paren
expression_select_or_expression_list := expression_or_select={expression=expression | stmt_select=stmt_select} other_expression_or_selects={literal_comma expression_or_select={expression=expression | stmt_select=stmt_select}}+
expression_in := expression=expression_non_front_recursive invert=literal_not? literal_in literal_open_paren values=expression_select_or_expression_list literal_close_paren
expression_exists_assertion := invert=literal_not? literal_exists literal_open_paren stmt_select=stmt_select literal_close_paren 
expression_null_assertion := expression=expression_non_front_recursive not_null={literal_not literal_null} | expression=expression_non_front_recursive not_null=literal_not_null | expression=expression_non_front_recursive is_null=literal_is_null
expression_between := expression=expression_non_front_recursive invert=literal_not? literal_between left_expression=expression_non_front_recursive literal_and right_expression=expression
expression_binary := expression_a=expression_non_front_recursive operator=binary_operator expression_b=expression
expression_parens := literal_open_paren expression=expression_front_recursive literal_close_paren
expression_front_recursive := expression_in | expression_exists_assertion | expression_parens | expression_null_assertion | expression_between | expression_binary | expression_function_invocation | expression_non_front_recursive

select_with := literal_with

identifier :=  whitespace* !all_literals value='[a-zA-Z][a-zA-Z0-9_]*'  whitespace*
num := whitespace* value='[0-9]+'  whitespace*
quoted_string := whitespace* value='"(?:[^"\\]|\\.)*"' whitespace* 

unary_operator := literal_not
binary_operator := literal_and | literal_or | literal_plus | literal_minus | literal_asterisk | literal_slash | literal_gte | literal_lte | literal_gt | literal_lt | literal_equal | literal_not_equal 
value_literal := identifier | num | literal_true | literal_false | literal_null | quoted_string

all_literals := literal_and | literal_or | literal_plus | literal_minus | literal_slash | literal_gte | literal_lte | literal_lt | literal_gt
                            | literal_equal | literal_not_equal | literal_not | literal_true | literal_false | literal_null 
                            | literal_comma | literal_asterisk | literal_period | literal_semi_colon | literal_open_paren
                            | literal_close_paren | literal_on | literal_using | literal_natural | literal_outer | literal_left
                            | literal_right | literal_inner | literal_full | literal_cross | literal_join | literal_from | literal_with 
                            | literal_select | literal_where | literal_all | literal_distinct | literal_as | literal_order | literal_by
                            | literal_collate | literal_asc | literal_desc | literal_nulls | literal_first | literal_last | literal_limit | literal_offset
                            | literal_not_null | literal_is_null | literal_is | literal_between | literal_exists | literal_in

literal_order :=  whitespace* literal='order' whitespace*
literal_by :=  whitespace* literal='by' whitespace*
literal_collate :=  whitespace* literal='collate' whitespace*
literal_asc :=  whitespace* literal='asc' whitespace*
literal_desc :=  whitespace* literal='desc' whitespace*
literal_nulls :=  whitespace* literal='nulls' whitespace*
literal_first :=  whitespace* literal='first' whitespace*
literal_last :=  whitespace* literal='last' whitespace*
literal_limit :=  whitespace* literal='limit' whitespace*
literal_offset :=  whitespace* literal='offset' whitespace*

literal_and :=  whitespace* literal='and' whitespace*
literal_or :=  whitespace* literal='or' whitespace*
literal_plus :=  whitespace* literal='\+' whitespace*
literal_minus :=  whitespace* literal='-' whitespace*
literal_slash :=  whitespace* literal='/' whitespace*
literal_gte :=  whitespace* literal='>=' whitespace*
literal_lte :=  whitespace* literal='<=' whitespace*
literal_gt :=  whitespace* literal='>' whitespace*
literal_lt :=  whitespace* literal='<' whitespace*
literal_equal :=  whitespace* literal='=' whitespace*
literal_not_equal :=  whitespace* literal='!=' whitespace* | whitespace* literal='<>' whitespace*
literal_not :=  whitespace* literal='not' whitespace*
literal_true :=  whitespace* literal='true' whitespace*
literal_false :=  whitespace* literal='false' whitespace*
literal_null :=  whitespace* literal='null' whitespace*
literal_not_null :=  whitespace* literal='notnull' whitespace*
literal_is_null :=  whitespace* literal='isnull' whitespace*
literal_is :=  whitespace* literal='is' whitespace*
literal_between :=  whitespace* literal='between' whitespace*
literal_exists :=  whitespace* literal='exists' whitespace*
literal_in :=  whitespace* literal='in' whitespace*

literal_comma :=  whitespace* literal=',' whitespace*
literal_period :=  whitespace* literal='\.' whitespace*
literal_asterisk :=  whitespace* literal='\*' whitespace*
literal_semi_colon :=  whitespace* literal=';' whitespace*
literal_open_paren :=  whitespace* literal='\(' whitespace*
literal_close_paren :=  whitespace* literal='\)' whitespace*

literal_on :=  whitespace* literal='on' whitespace*
literal_using :=  whitespace* literal='using' whitespace*
literal_natural :=  whitespace* literal='natural' whitespace*
literal_outer :=  whitespace* literal='outer' whitespace*
literal_left :=  whitespace* literal='left' whitespace*
literal_right :=  whitespace* literal='right' whitespace*
literal_inner :=  whitespace* literal='inner' whitespace*
literal_full :=  whitespace* literal='full' whitespace*
literal_cross :=  whitespace* literal='cross' whitespace*
literal_join :=  whitespace* literal='join' whitespace*

literal_from :=  whitespace* literal='from' whitespace*
literal_with :=  whitespace* literal='with' whitespace*
literal_select :=  whitespace* literal='select' whitespace*
literal_where :=  whitespace* literal='where' whitespace*
literal_all :=  whitespace* literal='all' whitespace*
literal_distinct :=  whitespace* literal='distinct' whitespace*
literal_as :=  whitespace* literal='as' whitespace*

whitespace := ' '